Neural networks are sensitive to hyper-parameter and architecture choices. Auto-mated Machine Learning (AutoML) is a promising paradigm for automating these choices. Current ML software libraries, however, are quite limited in handling the dynamic interactions among the components of AutoML. For example, efﬁcientNAS algorithms, such as ENAS [1] and DARTS [2], typically require an imple-mentation coupling between the search space and search algorithm, the two key components in AutoML. Furthermore, implementing a complex search ﬂow, such as searching architectures within a loop of searching hardware conﬁgurations, is difﬁcult. To summarize, changing the search space, search algorithm, or search ﬂow in current ML libraries usually requires a signiﬁcant change in the program logic.In this paper, we introduce a new way of programming AutoML based on symbolic programming. Under this paradigm, ML programs are mutable, thus can be manipulated easily by another program. As a result, AutoML can be reformulated as an automated process of symbolic manipulation. With this formulation, we decouple the triangle of the search algorithm, the search space and the child program. This decoupling makes it easy to change the search space and search algorithm (without and with weight sharing), as well as to add search capabilities to existing code and implement complex search ﬂows. We then introduce PyGlove, a new Python library that implements this paradigm. Through case studies onImageNet and NAS-Bench-101, we show that with PyGlove users can easily convert a static program into a search space, quickly iterate on the search spaces and search algorithms, and craft complex search ﬂows to achieve better results. 
This paper introduces the use of static analysis methods in conjunction with machine learning, specifically graph neural networks, for tasks in static analysis such as code completion, bug finding, and program repair. However, existing techniques are not effective for tasks that involve reasoning about program execution. This paper proposes a novel machine learning architecture called the Instruction Pointer Attention Graph Neural Network (IPA-GNN), which combines elements of recurrent neural networks (RNNs) and graph neural networks (GNNs) to improve the capacity for reasoning about program execution. The model is evaluated on tasks that require reasoning about program execution, including full and partial program execution. The results show that the IPA-GNN outperforms baseline models and exhibits an attention mechanism that enables it to make accurate branch decisions and execute programs efficiently. The contributions of this paper include the introduction of the learning to execute task in the context of static analysis, demonstrating the relationship between RNNs and GNNs, proposing the IPA-GNN model, and showing its superior performance compared to other models. Additionally, the paper illustrates how these models can be applied to non-standard notions of execution.
In this paper, we address the challenge of determining the appropriate relationships to include when representing an object as a graph. We focus on the representation of source code samples and introduce the concept of adding additional edges to the graph, beyond the abstract syntax tree (AST), to capture program behaviors more effectively. These additional edges can be derived from the AST using hand-coded static analysis algorithms, similar to the concept of temporal abstraction in reinforcement learning. We propose a differentiable neural network layer called Graph Finite-State Automaton (GFSA) that combines program analyses and mathematical tools for analyzing temporal behaviors. The GFSA layer can be trained end-to-end to add derived relationships to graph-structured data based on performance on downstream tasks. Experimental results demonstrate that the GFSA layer outperforms baseline methods for learning edge structures in graph-based neural networks.
Abstract
We consider the problem of differentially private selection. Given a ﬁnite set of candidate items and a quality score for each item, our goal is to design a differentially private mechanism that returns an item with a score that is as high as possible. The most commonly used mechanism for this task is the exponential mechanism. In this work, we propose a new mechanism for this task based on a careful analysis of the privacy constraints. The expected score of our mechanism is always at least as large as the exponential mechanism, and can offer improvements up to a factor of two. Our mechanism is simple to implement and runs in linear time. 1

Introduction
The exponential mechanism [28] is one of the most fundamental mechanisms for differential privacy.
It addresses the important problem of differentially private selection, or selecting an item from a set of candidates that approximately maximizes some objective function. The exponential mechanism was introduced soon after differential privacy itself, and has remained the dominant mechanism for private selection since.
The exponential mechanism is simple, easy to implement, runs in linear time, has good theoretical and practical performance, and solves an important problem. It can be used directly as a competitive mechanism for computing simple statistics like medians or modes [14, 16, 29]. Furthermore, it is an integral part of several more complex differentially private mechanisms for a range of tasks, including linear query answering [19], heavy hitter estimation [27], synthetic data generation [13, 36], dimensionality reduction [5, 12, 23], linear regression [2, 34], and empirical risk minimization
[4, 9, 24, 32].
In this work, we propose the permute-and-ﬂip mechanism as an alternative to the exponential mechanism for the task of differentially private selection. It enjoys the same desirable properties of the exponential mechanism stated above, and its expected error is never higher, but can be up to two times lower than that of the exponential mechanism. Furthermore, we show that in reasonable settings no better mechanism exists: the permute-and-ﬂip mechanism is Pareto optimal, and, if
� 0.96, is optimal in a reasonable sense “overall”. log( 1 2 (3 + √5))
≥
≈
The permute-and-ﬂip mechanism serves as a drop-in replacement for the exponential mechanism in existing and future mechanisms, and immediately offers utility improvements. The utility improve-ments of up to 2 over the state-of-the-art will impact practical deployments of differential privacy, where choosing the right privacy-utility trade-off is already a challenging social choice [1].
× 34th Conference on Neural Information Processing Systems (NeurIPS 2020), Vancouver, Canada.
2 Preliminaries 2.1 Differential Privacy
A dataset D is a collection of individual data coming from the universe of all possible datasets say datasets D and D� are neighbors, denoted D
. We
D�, if they differ in the data of a single individual.
∼
Differential privacy is a mathematical privacy deﬁnition, and a property of a mechanism, that guarantees the output of the mechanism will not differ signiﬁcantly (in a probabilistic sense) between any two neighboring datasets.
Deﬁnition 1 (Differential Privacy). A randomized mechanism if and only if: is �-differentially private,
D
:
Pr[ for all neighboring datasets D
S] (D)
D� and all possible subsets of outcomes S exp (�) Pr[
M
≤
∈
∈
M
∼
.
⊆ R
M (D�)
D → R
S]
The sensitivity of a function is an important quantity to consider when designing differentially private mechanisms, which measures how much a function can change between two neighboring datasets.
Deﬁnition 2 (Sensitivity). The sensitivity of a real-valued function q :
R is deﬁned to be:
Δq = max
D� |
D
∼ q(D) q(D�)
.
|
−
D → 2.2 Private Selection
{
= 1, . . . , n
} and an associated quality score function qr :
In this work, we study the problem of differentially private selection. Given a ﬁnite set of candidates
, our goal is to
R that returns a candidate r that approximately maximizes design a differentially private mechanism qr(D). The function qr(D) is typically a measure of how well the candidate r captures some statistic or property of the dataset D. A simple example is the most common medical condition, where qr counts the number of individuals with medical condition r [16].
R for each r
D →
∈ R
M
The only assumption we make is that the sensitivity of qr is bounded above by Δ for each r
. We that only depend on the dataset D through the quality scores qr(D). Thus, consider mechanisms
M for notational convenience, we drop the dependence on D, and treat a mechanism as a function of the quality scores instead. Speciﬁcally, we use qr ∈
R to denote a quality score, �q = [qr]r to denote (�q) to denote a mechanism executed on the quality score vector �q. the vector of quality scores, and
We deﬁne a notion of regularity, describing properties we would like in a mechanism for this task:
Deﬁnition 3 (Regularity). A mechanism is regular if the following holds:
∈ R
M
∈R
: Rn
M
→ R
Symmetry: For any permutation π : and associated permutation matrix Π
R → R (�q) = r] = Pr[
Pr[
M (Π�q) = π(r)].
M
Shift-invariance: For all constants c
R,
∈
Monotonicity: If qr ≤
Pr[ (�q) = r] = Pr[ (�q + c�1) = r].
M q�r and qs ≥
Pr[ q�s for all s (�q) = r]
M
= r, then
Pr[ (�q �) = r].
M
M
≤
Informally, a symmetric mechanism is one where the quality scores can be permuted arbitrarily without affecting the distribution of outcomes. This avoids pathologies where a mechanism can appear to do well for a particular quality score vector, but only because it has a built-in bias towards certain outcomes. Similarly, a shift-invariant mechanism is one where a constant can be added to all quality scores without changing the distribution of outcomes. A mechanism is monotonic if increasing one quality score while decreasing others will increase the probability on that outcome, and decrease the probability on all other outcomes. A mechanism that satisﬁes all of these criteria is called regular.
Mechanisms that are not regular have undesirable pathologies. Thus, we restrict our attention to regular mechanisms in this work. Beyond regularity, the main criteria we use to evaluate a mechanism is the error random variable: (
E
M
, �q) = q q (�q)
M
∗ − (4) where q
∗
= maxr
∈R qr is the optimal quality score. 2
Rn n,
×
∈ (1) (2) (3)
�
Algorithm 1: Permute-and-Flip Mechanism, q
∗ for r in RandomPermutation(
= maxr qr
) do
MP F (�q)
R
� pr = exp 2Δ (qr − q if Bernoulli(pr) then
� return r
)
∗
� end end 2.3 Exponential Mechanism
The exponential mechanism is a mechanism that is both classical and state-of-the-art for the task of differentially private selection.
Deﬁnition 4 (Exponential mechanism). Given a quality score vector �q mechanism is deﬁned by:
Rn, the exponential
∈
Pr[
MEM (�q) = r]
∝ exp
� 2Δ qr
.
�
�
It is well-known that the exponential mechanism is �-differentially private, and it is easy to show that it also satisﬁes the regularity conditions in Deﬁnition 3. In addition, it is possible to bound the error of the exponential mechanism, both in expectation and in probability:
Proposition 1 (Utility Guarantee of
Rn and all t 0,
E[
E (
MEM , �q)]
≤ 2Δ
� log (n),
MEM [8, 16]). For all �q (
Pr[
MEM , �q)
E
≥
∈ 2Δ
�
≥ (log (n) + t)] exp ( t).
−
≤ 3 Permute-and-Flip Mechanism
In this section, we propose a new mechanism,
MP F , which we call the “permute-and-ﬂip” mecha-nism. Just like the exponential mechanism, it is simple, easy to implement, and runs in linear time. It is stated formally in Algorithm 1. The mechanism works by iterating through the set of candidates
R in a random order. For each item, it ﬂips a biased coin, and returns that item if the coin comes up heads. The probability of heads is an exponential function of the quality score, which encourages the mechanism to return results with higher quality scores. The mechanism is guaranteed to terminate
, then the probability of heads is 1. with a result because if qr = q
∗
Theorem 1. The Permute-and-Flip mechanism
MP F is regular and �-differentially private.
Proofs of all results appear in the supplement; in addition, the main text will contain some proof sketches. The proof of this theorem uses Proposition 2 (below) and a direct analysis of the probability
MP F . Note that the condition in Proposition 2 can be immediately veriﬁed to hold mass function of 2Δ by observing that pr in Algorithm 1 changes by exactly exp(�) (with equality) when qr ≤ when qr increases by 2Δ, and by a short argument conditioning on the random permutation. The proof using the pmf also handles the case when increasing qr by 2Δ causes item r to have maximum score.
∗ − q 3.1 Derivation
We now describe the principles underlying the permute-and-ﬂip mechanism and intuition behind its (�q) = r] for every (�q, r) pair. derivation. To deﬁne a mechanism, we must specify the value of Pr[
Intuitively, we would like to place as much probability mass as possible on the items with the highest score, and as little mass as possible on other items, subject to the constraints of differential privacy.
For regular mechanisms, these constraints simplify greatly:
Proposition 2. A regular mechanism is �-differentially private if:
M
M
→ R
: Rn exp (
Pr[
M (�q) = r]
≥
�) Pr[
−
M (�q + 2Δ�er) = r] for all (�q, r), where �er is the unit vector with a one at position r. 3
The proof (in the supplement) argues that it is only necessary to compare �q to the quality-score vector with q�r = qr + Δ and q�s = qs −
= r, which, by monotonicity, is the worst-case neighbor of �q. By shift-invariance, the mechanism is identical when q�r = qr + 2Δ and q�s = qs, or
�q � = �q + 2Δ�er, which leads to the constraint in the theorem.
Δ for all s
This theorem allows allows us to reason about only one constraint for every (�q, r) pair, instead of inﬁnitely many. Ideally we would like to distribute probability to items as unevenly as possible, which would make these constraints tight (satisﬁed with equality). However, we can see by examining the overall numbers of constraints and variables that we cannot make all of them tight. For each score vector �q, there are: (1) n = free variables (the probabilities of the mechanism run on �q), (2) n inequality constraints (Proposition 2), and (3) one additional constraint that the probabilities sum to one. This is a total of n inequality constraints and one equality constraint per n variables. On average, we expect at most n 1 of the inequality constraints to be tight, leading to n linear constraints that are satisﬁed with equality for each group of n variables.
|R|
−
The following recurrence for Pr[ be satisﬁed with equality:
M (�q) = r] deﬁnes a mechanism by selecting certain constraints to
Pr[
M (�q) = r] =
− 1
−
� 1 n
∗ exp (
�) Pr[
M (�q + 2Δ�er) = r] s:qs<q
∗
Pr[
M (�q) = s] 2Δ q
∗ − qr ≤ qr = q
∗ (5)
�
�
The privacy constraint is tight whenever qr ≤ scores (Case 2, qr = q
∗ here, n is the number of quality scores equal to q
�
. 2Δ (Case 1). When qr is one of the maximum
), the sum-to-one constraint is used instead, in conjunction with symmetry;
∗ − q
∗
{
∈
∈
Zn
Rn 2Δ = 2Δ�s : �s
. To see this, note that the base case occurs when n
∗
This recurrence deﬁnes a unique mechanism for quality score vectors on the 2Δ-lattice, i.e., for
= n, i.e., all scores
�q
} are equal to the maximum and each item has probability 1
Rn 2Δ with n
= k maximum elements. By Case 2, the mechanism is fully deﬁned by the probabilities assigned to items with non-maximum scores. By Case 1, the probability of selecting an item r that does not have maximum score is deﬁned by the probability of selecting r with the score vector �q � = �q + 2Δ�er; this also belongs to the 2Δ-lattice, and q�r > qr. Eventually, a score vector with n
= k + 1 maximum elements will be reached, moving closer to the base case of n n . Now consider an arbitrary �q
= n.
∈
∗
∗
∗
∗
The following recurrence generalizes the original and is well-deﬁned for all �q simply interpolating between the points in the 2Δ-lattice.
∈
Rn, obtained by
Pr[
M (�q) = r] = exp
� 1 n
∗ 1
�
� 2Δ (qr −
− s:qs<q
) q
∗
Pr[
M (�q + (q
∗ − qr)�er) = r] qr < q
Pr[
�
∗
M (�q) = s] qr = q (6)
∗
∗
� qr)/2Δ times so that the rth score becomes exactly q
The only difference is Case 1, which is obtained by unrolling Case 1 of the original recurrence (q
. The advantage is that the new expression is well deﬁned for vectors that are not on the 2Δ-lattice.
∗ −
�
�
∗
Equation (6) deﬁnes a mechanism. In principle, it also gives a way to compute the probabilities of the mechanism for any ﬁxed �q. The most direct approach to calculate these probabilities uses dynamic programming and takes exponential time. A smarter algorithm based on an analytic expression for the solution to the recurrence runs in O(n2) time (Appendix E), but is still unacceptably slow compared to the linear time exponential mechanism. Remarkably, it is not necessary to explicitly compute the probabilities of this mechanism, as the permute-and-ﬂip mechanism solves this recurrence relation.
As a result, we can simply run the simple linear-time Algorithm 1 and avoid computing the mechanism probabilities directly.
Proposition 3.
MP F solves the recurrence relation in Equation (6).
Proof (Sketch). Case 2 is satisﬁed because
MP F is symmetric and a valid probability distribution.
For Case 1, let �q � = �q + (q
MP F to both �q and �q �. In each case, the coin-ﬂip probabilities are the same for all items except r, and the probability of selecting any given permutation is the same. The ratio Pr[
MP F (�q �) = r] can be shown to be exactly
MP F (�q) = r]/ Pr[ pr/p�r, where pr = exp is the coin-ﬂip probability with �q and p�r = 1 is the coin-ﬂip
) probability with �q �. The ratio is exactly exp
) q qr)�er and consider applying
, as required by Case 1. 2Δ (qr −
∗ − q
∗
�
�
�
� 2Δ (qr −
∗
� 4
�
�
MEM (�q)
Algorithm 2: q
= maxr qr
∗ repeat r pr = exp
∼
Uniform[
�
]
R 2Δ (qr −
�
) q
∗
� until Bernoulli(pr); return r
MP F (�q)
Algorithm 3: q
= maxr qr
∗ repeat r pr = exp
=
∼
Uniform[
�
]
R 2Δ (qr − r
�
}
R \ {
) q
∗
�
R until Bernoulli(pr); return r 4 Comparison with Exponential Mechanism
In this section, we compare the permute-and-ﬂip and exponential mechanisms, both algorithmically and in terms of the error each incurs. One (unconventional) way to sample from the exponential mechanism is stated in Algorithm 2. This is a rejection sampling algorithm: an item is repeatedly with replacement and returned with probability pr = sampled uniformly at random from the set exp 2Δ (qr −
. For the permute-and-ﬂip mechanism, an item is repeatedly sampled uniformly without replacement and returned with the same probability. Sampling at random from the set without replacement is mathematically equivalent to iterating through a random permutation, and hence Algorithm 3 is equivalent to Algorithm 1. These implementations are not recommended in practice, but are useful to illustrate connections between the two mechanisms.
R
R
�
� q
)
∗
�
Intuitively, sampling without replacement is better, because items that are not selected, which are likely to have low scores, are eliminated from future consideration. In fact, in Theorem 2 we prove that the permute-and-ﬂip mechanism is never worse than the exponential mechanism in a very strong sense. Speciﬁcally, we show that the expected error of permute-and-ﬂip is never larger than the exponential mechanism, and the probability of the error random variable exceeding t is never larger for permute-and-ﬂip (for any t). This is a form of stochastic dominance [18], and suggests it is always preferable to use permute-and-ﬂip over the exponential mechanism, no matter what the risk proﬁle is.
Theorem 2.
MP F is never worse than
MEM , �q)],
E[
MP F , �q)]
E
MEM . That is, for all �q
MP F , �q) (
≥
E
Pr[
≤ (
∈
Rn and all t
Pr[ t] ( 0,
≥
MEM , �q)
≤
E t]
≥ (
E[
E
As a direct consequence of Theorem 2, the permute-and-ﬂip mechanism inherits the theoretical guarantees of the exponential mechanism (Proposition 1).
Corollary 1. For all �q 0,
∈
Rn and all t 2Δ
� log (n),
≥
E[
E (
MP F , �q)]
≤
Pr[ (
MP F , �q)
E
≥ 2Δ
� (log (n) + t)] exp ( t).
−
≤ 4.1 Analysis of Worst-Case Error
To further compare the two mechanisms, it is instructive to compare their expected errors for a particular class of score vectors. In particular, we examine score vectors that are worst cases for both mechanisms. This analysis will reveal that permute-and-ﬂip can be up to 2 better than the exponential mechanism, and that the upper bounds on expected error in Proposition 1 and Corollary 1 are within a factor of four of being tight.
Proposition 4. The worst-case expected errors for both (c, . . . , c, 0) of this form are:
MP F occur when �q =
. The expected errors for score vectors
MEM and
Rn for some c 0. Let p = exp
� 2Δ c
≤
×
∈
E[
E (
MEM , �q)] = 2Δ
� log
� 1 p
�
� 1
− 1 1 + (n
�� 1
− 1)p p)n
,
�
. 2Δ
�
The worst-case expected errors are found by maximizing Equations (7) and (8) over p
MP F , �q)] = ( (1
− np
E[
E log 1 p
��
−
−
� 1
� (7) (8) (0, 1].
∈
Figure 1a shows the expected error of both mechanisms using Equations (7) and (8) for n = 3 and p
MEM , as expected by Theorem 2.
MP F is always lower than that of (0, 1]. The error of
∈ 5
(a) (b) (c)
Figure 1: (a) Expected error of
Ratio of expected errors between expected error of
MEM and
MEM and
MP F as a function of n.
MEM and
MP F as a function of p for n = 3, � = 1, and Δ = 1. (b)
MP F as a function of p for varying n. (c) Worst-case
At the two extremes (p = 0 and p = 1), the expected error of both mechanisms is exactly 0, because: (1) when p = 1, all scores are equal to the maximum, and (2) when p 0, the total probability assigned to items with non-maximum scores vanishes. The maximum error for each mechanism occurs somewhere in the middle, typically near p = 1 n . In fact, by substituting p = 1 into Equation (8), we obtain:
Proposition 5. For �q = (c, . . . , c, 0) of permute-and-ﬂip is at least Δ that the upper bounds of Proposition 1 and Corollary 1 are within a factor of four of being tight.
Rn with c = 2� log (n). This implies that E[
MP F , �q)] (
E
Δ 2� log (n) as well, and 2Δ
� log n, the expected error E[
MEM , �q)]
→
≥
−
∈
E ( n
Figure 1b shows the ratio E[
E
E[
E of n for p depends on � and Δ through p. We observe that: (
MEM ,�q)]
MP F ,�q)] of expected errors of the two mechanisms for different values ( (0, 1]. The result is independent of particular choices of � and Δ, as the ratio only
∈
• The ratio is always between one and two, and approaches two in the limit at p
• The required p to achieve a ﬁxed ratio decreases with n, and the ratio converges to one for all p > 0 as n goes to inﬁnity. This behavior is well-explained by the algorithmic comparison earlier in this section: as n goes to inﬁnity, the probability of sampling the same low-scoring item multiple times becomes negligible, so sampling without replacement (
MP F ) becomes essentially identical to sampling with replacement ( 0 (larger �).
→
MEM ).
These results are for a particular class of (worst-case) quality-score vectors and not necessarily indicative of what will happen in applications. In our experiments with real quality-score vectors (Section 6) we observe ratios close to two for the values of � that provide reasonable utility. We have never observed a ratio greater than two for any �q, and it is an open question whether this is possible.
In practice, we can and do realize signiﬁcant improvements even for large n.
MP F as a function of n by
Figure 1c compares the worst-case expected errors of numerically maximizing over p in Equations (7) and (8) for different values of n and � = Δ = 1.
For reference, we also plot the analytic upper and lower bounds from Proposition 1, Corollary 1, and Proposition 5. The ratio of worst-case expected error between
MP F is largest at n = 2, and it decays towards 1 as n increases. Again, this is explained by the algorithmic similarities between the two mechanisms as n
MEM and
MEM and
.
→ ∞ 5 Optimality of Permute-and-Flip
In the previous section, we showed that permute-and-ﬂip is never worse than the exponential mech-anism, and is sometimes better by up to a factor of two. In other words, it Pareto dominates the exponential mechanism. In Proposition 6 we show that permute-and-ﬂip is in fact Pareto optimal on the 2Δ-lattice Rn 2Δ (see Section 3.1) with respect to the expected error. That is, any regular mechanism that is better than permute-and-ﬂip for some �q 2Δ must be worse for some other
�q �
Proposition 6 (Pareto Optimality). If E[ and some �q 2Δ, then there exists �q �
, �q)] for some regular mechanism ( (MP F , �q)] > E[
Rn
E 2Δ such that E[
, �q �)].
Rn
Rn
Rn 2Δ.
M
∈
∈ (
M (MP F , �q �)] < E[
E
E
M
E
∈
∈
Pareto optimality is a desirable property that differentiates permute-and-ﬂip from the exponential mechanism. However, there are many Pareto optimal mechanisms, so we would like additional 6
(a) (b)
M
P F , k = 4
Figure 2: Optimality ratio for
P F , n = 4
M
MP F and assurance that permute-and-ﬂip is in some sense the “right” one. To achieve this, we show that it is optimal in some reasonable “overall” sense. In particular, it minimizes the expected error averaged over a representative set of quality score vectors, as long as � is sufﬁciently large.
MEM for various n and k.
EM , n = 4
M (c)
Theorem 3 (Overall Optimality). For all regular mechanisms and all �
≥
M log ( 1 2 (3 + √5)), where Q =
�q
{
∈
Rn 2Δ : q
∗ −
��q
Q
∈ qr ≤
E[
E (
MP F , �q)]
≤
E[ (
E
, �q)]
M
Q
��q
∈ 2Δk, q
= 0
}
∗ for any integer constant k 0.
≥
This theorem is proved by analyzing a linear program (LP) that describes the behavior of an optimal regular mechanism on the 2Δ-lattice, using the linear constraints described in Section 3.1 to enforce privacy and regularity, and the linear objective from the theorem. The result holds for the bounded
= 0 and all scores at most k lattice points away from zero. Boundedness is required lattice with q to have a ﬁnite number of variables and constraints. The restriction that q
= 0 is without loss of generality: by shift-invariance, a regular mechanism is completely deﬁned by its behavior on vectors with q
= 0.
∗
∗
∗
Theorem 3 guarantees that permute-and-ﬂip is optimal if � is large enough. For smaller �, we can empirically check how close to optimal
MP F is by solving the LP. This is computationally prohibitive in general, because the LP size grows quickly and becomes intractable for large n and k, but we can make comparisons for smaller lattices. Figure 2 shows the “optimality ratio” of permute-and-ﬂip and the exponential mechanism for various settings of �, n, and k. The optimality ratio of a mechanism
�q E[ is the ratio
�q E[ by solving the linear program.
M is the optimal mechanism on the bounded 2Δ-lattice obtained
,�q)]
,�q)] , where (
E (
E
M
M∗
M∗
�
�
As shown in Figure 2a and Figure 2b, the optimality ratio for permute-and-ﬂip is equal to one above the threshold, as expected. Furthermore, it barely exceeds one even when � is below the threshold: the largest measured value is about 1.01. The ratio grows slowly with k (Figure 2b) and shows no strong dependence on n (Figure 2a). For the exponential mechanism (Figure 2c), the optimality ratio is much more signiﬁcantly larger than one, and generally increases with �, approaching two for larger k and �. Interestingly, the optimality ratio approaches one for both mechanisms as � 0.
→ 6 Experiments
We now perform an empirical analysis of the permute-and-ﬂip mechanism. Our aim is to quantify the utility improvement from permute-and-ﬂip relative to the exponential mechanism for different values of � on real-world problem instances. We use ﬁve representative data sets from the DPBench study:
HEPTH, ADULTFRANK, MEDCOST, SEARCHLOGS, and PATENT [20] and consider the tasks of mode and median selection. In each case, the candidates are the 1024 bins of a discretized domain.
For each task, we construct the quality score vector and then analytically compute the expected error for a range of different � for both the permute-and-ﬂip and exponential mechanisms using their probability mass functions. Below we summarize our experimental ﬁndings; additional experimental results can be found in Appendix G.
Mode. For mode selection, the quality function is the number of items in the bin, which has sensitivity one. Figure 3a shows expected error as a function of � for the HEPTH data set. Note that expected error is plotted on a log scale, while � is plotted on a linear scale, and we truncate 7
(a) Mode (b) Median (c) Median
Figure 3: (a) and (b) Expected error of (c) Expected error of
MP F on ﬁve datasets for � where expected error of
MEM is 50.
MEM and
MP F on the HEPTH dataset for varying �. the plot when the expected error falls below one. The ratio of the expected error of the exponential mechanism to that of permute-and-ﬂip ranges from one (for smaller �) to two (for larger �). For the range of � that provide reasonable utility, the improvement is closer to two. For example, at � = 0.04, the ratio is 1.84. The expected error of
MEM would need about 1.27 times larger privacy budget to achieve the same utility.
MP F at this value of � is about 5.4, and
Median. For median selection, the quality function is the (negated) number of individuals that must be added or removed to make a given bin become the median, which is also a sensitivity one function
[29]. Figure 3b again shows the expected error as a function of � for the HEPTH data set. Again, the ratio of expected errors ranges from one (for smaller �) to two (for larger �). For the range of � that provide reasonable utility, the improvement is closer to two. For example, at � = 0.01, the ratio is 1.93. The expected error of
MEM would need about 1.19
MP F at this value of � is about 13.7, and times larger privacy budget to achieve the same utility.
MP F become approximately parallel lines as
MEM and
In Figures 3a and 3b, the expected errors of
� increases. Because the plots use linear scale for � and logarithmic scale for expected error this means that the error of both mechanisms behaves approximately as c exp(
�) for some c. Additionally,
MP F offers an asymptotically constant multiplicative improvement in expected error (a factor of two) and an additive savings of �. For the range of � that demonstrate the most reasonable privacy-utility tradeoffs, this additive improvement is a meaningful fraction of the privacy budget.
−
In Figure 3c we plot the expected error of
MP F on all ﬁve data sets. For each dataset, we use the value of � where
MEM gives a expected error of 50. This allows us to plot all datasets on the same scale for some � that gives a reasonable tradeoff between privacy and utility. The improvements are signiﬁcant, and close to a factor of two for all data sets.
MEM and 7
Abstract
While neural conversation models have shown great potentials towards generating informative and engaging responses via introducing external knowledge, learning such a model often requires knowledge-grounded dialogues that are difﬁcult to obtain. To overcome the data challenge and reduce the cost of building a knowledge-grounded dialogue system, we explore the problem under a zero-resource setting by assuming no context-knowledge-response triples are needed for training. To this end, we propose representing the knowledge that bridges a context and a response and the way that the knowledge is expressed as latent variables, and devise a variational approach that can effectively estimate a generation model from a dialogue corpus and a knowledge corpus that are independent with each other. Evaluation results on three benchmarks of knowledge-grounded dialogue generation indicate that our model can achieve comparable performance with state-of-the-art methods that rely on knowledge-grounded dialogues for training, and exhibits a good generalization ability over different topics and different datasets. 1

Introduction
Recent years have witnessed rapid progress on learning a dialogue generation model for open domain human-machine conversation [40, 34, 50, 1]. Though such models in advanced neural architectures
[39] are capable of replying with natural and smooth responses regarding to conversation history, people can still feel a clear gap when they converse with the systems, compared with the conversation with humans. One primary reason is that existing dialogue systems lack of necessary knowledge and thus cannot go deep with humans when they dive into a speciﬁc topic. To bridge the gap, researchers begin to study how to ground open domain dialogues by external knowledge, which could be obtained either from structured knowledge bases [26, 38], or from unstructured documents [10, 55, 16].
In this work, we study document-grounded dialogue generation in which a response is synthesized regarding to a conversation context associated with a few sentences from external documents. While the documents serve as content sources and hint response generation with knowledge, collecting enough dialogues that are naturally grounded on documents for model training is not trivial. Although some benchmarks built upon crowd-sourcing have been released by recent papers [55, 10, 16], the small training size makes the generation models generalize badly on unseen topics [10] and the cost of building such data also prevents from transferring the technology proved on the benchmarks to
∗Work done during the internship at Microsoft STCA.
†Corresponding author: Can Xu (caxu@microsoft.com). 34th Conference on Neural Information Processing Systems (NeurIPS 2020), Vancouver, Canada.
new domains and new languages. A very recent paper [52] attempts to tackle the data challenge under a low-resource assumption, however, reliance on the expensive knowledge-grounded dialogues is still not fully removed. In this paper, we make one step further by exploring knowledge-grounded dialogue generation under a zero-resource setting, where no context-knowledge-response triples (e.g., those obtained from crowd-sourcing) are assumed available in training. Apparently, such an assumption raises even bigger challenges for learning, but our effort will allow developers to build a knowledge-grounded dialogue system from independent dialogues (e.g., context-response pairs collected from Reddit) and knowledge resources (e.g., wiki articles), and thus can greatly reduce the cost of building such systems and enhance transferability of the technology.
Since knowledge-grounded dialogues are absent in training, we introduce two latent variables that represent the knowledge for grounding and the rate of grounding (i.e., how much knowledge is used in responding) respectively. The generation process is then formalized within a probabilistic framework and optimized via variational inference [19]. To take advantage of the recent breakthrough on pre-training for natural language tasks, we build the probabilistic models on the basis of a pre-trained language model. Instead of using generative models, we propose instantiating the posterior with a retrieval model whereby the search space of knowledge is restrained within a few relevant candidates.
Thus, we can circumvent the tedious sampling steps and have a more stable learning process. In addition to the objectives in generalized EM, we also devise a knowledge selection loss and a mutual information loss with the former to learn how to tailor long knowledge input to meet the capacity constraint of the pre-trained language model and the latter to effectively estimate the latent grounding rate in variational inference.
We conduct experiments with benchmarks of knowledge-grounded dialogue generation that are constructed by crowd-sourcing. Evaluation results in terms of both automatic metrics and human judgment indicate that our model not only achieves comparable performance with the state-of-the-art model that is learned from crowd-sourced training sets, but also exhibits a good generalization ability over different topics and different datasets.
Our contributions are four-fold: (1) exploration of knowledge-grounded dialogue generation under a zero-resource setting; (2) proposal of a double latent variable model that depicts not only the knowledge connecting a context and a response but also the way that the knowledge is expressed; (3) proposal of a variational learning approach; and (4) empirical veriﬁcation of the effectiveness of the proposed approach on three benchmarks of knowledge-grounded dialogue generation. 2 Approach n i=1 as a dialogue corpus and Kkg = {Kj} m
Given Dcov = {(Ci, Ri)} j=1 as a knowledge base, where
∀i ∈ {1, . . . , n}, Ci refers to a dialogue context with Ri a response; and ∀j ∈ {1, . . . , m}, Kj denotes a piece of knowledge (e.g., a sentence in Wikipedia), we aim to learn a model p(R∣C, K) from
Dcov and Kkg without any oracles (e.g., the crowd-workers in existing benchmarks) indicating the collation of a dialogue and the related knowledge. Thus, for a new context C associated with external knowledge K (e.g., obtained from a retrieval model like in [10]), one can generate a response R following p(R∣C, K). 2.1 Zero-Resource Learning Framework
Figure 1 gives the graphical model of our approach.
The model depicts dependency among four variables: dialogue context C, response R, latent knowledge Zk, and grounding rate Zα, where Zk bridges C and R controlled by Zα. Basically, Zα indicates how much knowledge in Zk is carried by R according to C. Hence, the variable endows our method with ﬂexibility that re-sponses in various levels of knowledge (e.g., from a short reply that simply catches up with the context to an informative statement that delivers necessary con-tent for continuing the discussion) can be modeled in a uniﬁed framework. More advantages credited to Zα include (1) in training, the model guarded by Zα be-2
Figure 1: Graphical model of the proposed approach. Solid lines mean that there exists links in both the probabilistic graph and the neural graph, while dotted lines mean that links only exist in the neural graph.
comes more robust regarding to the noise in the inferred Zk; and (2) in prediction, the model can automatically control the way of knowledge expression and thus can be easily adapted to different scenarios without much extra effort. The general objective of learning can be formulated as
L(θ) = E(C,R)∼Dcov [log pθ(R∣C)]. (1)
By approximating the true posterior with a variational posterior q(Zk, Zα∣C, R), we optimize the marginal log-likelihood in Eq. 1 with Generalized EM method [4]:
E-step:
M-step: arg min q
DKL(q(Zk)∥p(Zk∣C, R)) + DKL(q(Zα)∥p(Zα∣C, R)), arg max p
EZα∼q(Zα)EZk∼q(Zk) log p(R∣C, Zk, Zα)
− DKL(q(Zk)∥p(Zk∣C)) − DKL(q(Zα)∥p(Zα∣C, Zk)), (2) (3) where q(Zk), q(Zα), and q(Zk, Zα) stand for q(Zk∣C, R), q(Zα∣C, R), and q(Zk, Zα∣C, R), re-spectively, and DKL(⋅∣⋅) refers to Kullback–Leibler divergence. Detailed derivations are presented in supplementary material. 2.2 Neural Parameterization q(((Zk))) & p(((Zk∣∣∣C, R))): normally, q(Zk) and p(Zk∣C, R) can be speciﬁed as neural generative models (e.g., within the VAE framework [9, 47]). However, learning generative posteriors often requires sampling from a large space that is slow and inaccurate. It is also difﬁcult to approximate the intractable p(Zk∣C, R), which could enlarge the gap between E-step and M-step. Motivated by the issues, we instead deﬁne q(Zk) with a retrieval model. Formally, q(Zk) is calculated as q(Zk∣C, R) = expF (C,R,Zk)
∑K′∈S(R) expF (C,R,K′) , (4) where S(R) denotes the inference of the latent knowledge that is made up of top-l results retrieved from Kkg by a relevance model rel(⋅, ⋅) with R as a query, and F(⋅, ⋅, ⋅) is a 3-layer transformer that maps (C, R, Zk) to a matching score. Since S(R) is enumerable, p(Zk∣C, R) in Eq. 2 can be calculated by p(Zk∣C, R) = p(Zk, R∣C) p(R∣C)
= p(Zk∣C)p(R∣C, Zk)
∑K′∈S(R) p(K ′
∣C)p(R∣C, K ′
,
) (5) where p(Zk∣C) and p(R∣C, Zk) will be detailed later. p(((R∣∣∣C, Zk, Zα))): we adopt UNILM [11] as the backbone of P (R∣C, Zk, Zα). Note that UNILM can be replaced by other pre-trained language models such as GPT-2 [28]. Here, we mix Zk with random noise Z sampled from Kkg. This is to simulate the real scenario in test where the useful knowledge is often enclosed with a lot of irrelevant candidates (e.g., in Wizard of Wikipedia [10], each context is associated with 61 knowledge candidates and only one of them is selected by the crowd-worker for responding). Then P (R∣C, Zk, Zα) is deﬁned by UNILM(I) with I given by
I = [CLS][Zα] c1 . . . clc [SEP] S1 . . . Slk [SEP] r1 . . . rlr [SEP], (6) where (c1, . . . , clc ) denotes the utterance sequence in context C, (r1, . . . , rlr ) denotes the word sequence in response R, and (S1, . . . , Slk ) denotes the sentence sequence of Zk ∪ Z.
One practical issue is that large-scale pre-trained language models such as UNILM often set constraint on the maximum number of tokens they can handle (e.g., 512 tokens in UNILM), which forces us to shorten I before feeding it to the models. To this end, we devise a knowledge selection model which is formalized as a binary classiﬁer p(y∣C, Z) with CLS(UNILM(I
)) as input, where CLS(⋅) returns the vector corresponding to the [CLS] token, and I
= [CLS]c1 . . . clc[SEP]z1 . . . zlz [SEP] with Z = (z1, . . . , zlz ). Then, sentences in Zk ∪ Z are fed to I one-by-one in a descending order
′
′ 3
according to p(y∣C, Z) until the capacity constraint. For simplicity, we deﬁne p(Zk∣C) in Eq. 5 as p(y = 1∣C, Zk), and deﬁne p(R∣C, Zk) in Eq. 5 with P (R∣C, Zk, Zα) by dropping [Zα] in Eq. 6. p(((Zα∣∣∣C, Zk))): we deﬁne p(Zα∣C, Zk) as σ(CLS(F(IpZα ))), where σ(⋅) is a sigmoid function,
F(⋅) is 3-layer transformer, and IpZα = e[CLS]e[Zα]e[c1] . . . e[cn]e[SEP]e[S1] . . . e[Sk] with e[⋅] the summation of the token embedding, the position embedding, and the segment embedding given by the embedding layer of UNILM(I). q(((Zα))): q(Zα) is speciﬁed as Sim(R, Zk) with Sim(⋅, ⋅) a similarity function of sentence pairs. 2.3 Learning Details
Besides Eq. 2 and Eq. 3, two extra objectives are also included in learning in order to explicitly optimize knowledge selection and enhance the learning of Zα.
Knowledge Selection Loss: the knowledge selection model p(y∣C, Z) is optimized by differentiating
Zpos from Zneg, where Zpos corresponds to the maximum Sim(R, Z) with Z ∈ S(R), and Zneg is randomly sampled from Kkg. The loss function can be formulated as
Lks = − log(p(y = 1∣C, Zpos)) − log(p(y = 0∣C, Zneg)). (7)
Mutual Information Loss: although the posterior q(Zα) is deterministic, we still observe that it is hard to encode the information of knowledge expression into Zα through learning, which is a phenomenon similar to the posterior collapse problem in [5, 51]. To mitigate the problem, we directly impose the association of Zα and R given Zk by a mutual information loss deﬁned as
I(Zα, R) = Ep(Zα,R) log p(Zα,R) p(Zα)p(R) . Since direct optimization of I(Zα, R) is intractable, we instead propose maximizing a lower bound via variational information maximization [6] which can be formulated as
I(Zα, R) ≥ Ep(Zα)Ep(R∣Zα) log qφ(Zα∣R). (8)
In order to optimize Eq. 8, we need to make generation of response tokens differentiable. Recall that the probability distribution of token wt is calculated as: pt = (W[Ht]) ∈ Rv, (9) where Ht is the hidden state of wt in p(R∣C, Zk, Zα), and W ∈ Rh×v are trainable parameters with h the size of Ht and v the vocabulary size. Though one can estimate the gradient of Ep(R∣Zα) with
REINFORCE algorithm [43], such an approach often suffers from high variance. Therefore, we instead exploit the gumbel-softmax reparametrization trick [17] as a low-variance approximation of sampling from the categorical distribution pt:
˜et =
∣V ∣
∑ i=1
¯e(wi) softmax((pt + ξ)/τ )i, (10) where ξ is an independent noise sampled from the Gumbel distribution, τ is the temperature (i.e., a hyper-parameter), and ¯e(wi) is the embedding of wi in p(R∣C, Zk, Zα). Although this gradient estimator is biased, we ﬁnd that it works well in practice. We set τ = 0.1 based on the results on validation and ﬁx the value in all the experiments.
The learning algorithm is summarized in Algorithm 1. 2.4 Knowledge-grounded Response Generation Model
After learning from Dcov and Kkg, we deﬁne the response generation model p(R∣C, K) in test as p(R∣C, Z, Zα), where we rank K = {K ′ i)} and ﬁll Z with the ranked sequence until reaching the capacity constraint of UNILM, and Zα is predicted by p(Zα∣C, Z). i} according to {p(y∣C, K ′ 3 Experiments
We test the proposed method on benchmarks of knowledge-grounded dialogue generation, includ-ing Wizard of Wikipedia (Wizard) [10], Topical-Chat (TC) [16], and CMU Document Grounded
Conversations (CMU_DoG) [55]. 4
Algorithm 1 Optimization Algorithm 1: Input: dialogue corpus Dcov, knowledge corpus Kkg, pre-trained UNILM, threshold λ, and maximum step
M .
Update the parameters of the model based on Eq. 7
Sample a mini-batch (Ci, Ri) from Dcov and retrieve S(Ri) with rel(⋅, ⋅).
Sample a t from uniform(0, 1). if t < λ: 2: Construct a relevance model rel(⋅, ⋅) based on Kkg. 3: for m ← 1 to M do 4: 5: 6: 7: 8: 9: 10: 11: 12: 13: end for 14: return p(y∣C, Z), p(Zα∣C, Z) and p(R∣C, Z, Zα).
Estimate p(Zk∣C, R) based on Eq. 5
Update the parameters of the model based on Eq. 2
Sample Zk from q(Zk∣C, R)
Update the parameters of the model based on Eq. 3 and Eq. 8 else:
▷ E-Step.
▷ M-Step. 3.1 Experimental Setup
Training Data: we build the knowledge corpus with a Wikipedia dump,3 where text is extracted with an open source tool4 and split into sentences using NLTK.5 In total, there are 5, 972, 585 articles and 77, 152, 626 sentences. On average, each sentence contains 27.4 words. The dialogue corpus is con-structed from the Reddit Conversation Corpus cleaned by [12]. We merge the training/validation/test sets in the original data, and extract a subset by the following rules: (1) the length of the response falls in (10, 50); (2) the proportion of unique non-stop words in the response falls in (0.25, 0.6); (3) the proportion of unique words in the response is larger than 0.5; (4) Sim(R, ˜K) ≥ 0.1 where
˜K = arg maxK∈S(R) Sim(R, K); and (5) the length of ˜K in (4) is longer than 10. These rules could remove responses that are too short, too long, too generic, or in an extreme chat-style, and thus can guarantee the quality of training. Automatic evaluation metrics are also sensitive to the length of generated responses. Our model suffers because of the length inconsistent between training and testing. Instead of adjusting the length distribution of training data, we drop the ending token for short responses during training to approximate the maximum average length of benchmarks(24 in our experiment). After the pre-processing, the subset is randomly split into a training set and a validation set with 842, 521 and 2, 737 dialogues respectively. On average, each dialogue (with the last turn as the response and other turns as the context) contains 3.1 utterances in both sets, and the average length of the utterances is 16.0 in training and is 16.1 in validation. Note that the validation set is used for model selection and thus we do not access any data point in the benchmarks before evaluation.
Test Data: all the benchmarks are built with crowd-sourcing on Amazon Mechanical Turk (AMT), and are split into training sets, validation sets, and test sets by the data owners. In Wizard and
CMU_DoG, knowledge is obtained from Wikipedia, while in TC, besides wiki articles, Washington
Post articles and Reddit fun facts are also utilized as the knowledge sources. Unlike CMU_DoG that focuses on movie domain, both Wizard and TC cover a wide range of topics from multiple domains.
Various conﬁgurations are set up to simulate conversation scenarios in real world. In Wizard, a wizard tells an apprentice about what he/she learns from the knowledge about a speciﬁc topic. In addition to wizard-apprentice conversations, CMU_DoG also contains conversations between two workers who know the background documents and try to discuss the content in depth. In TC, participants play symmetric and asymmetric roles according to the knowledge they can access under 5 settings. In
Wizard and TC, the test sets are further split into Seen/Frequent and Unseen/Rare where the former contains topics frequently appearing in the training sets and the latter contains topics infrequently or never appearing in the training sets. For Wizard, we follow [10] and conduct pre-processing with the code published on ParlAI.6 For CMU_DoG, we use the version shared at https://github. com/lizekang/ITDD. For TC, we utilize the data published in the open source project https: 3http://wikipedia.c3sl.ufpr.br/enwiki/20191120/ 4https://github.com/attardi/wikiextractor/wiki 5https://www.nltk.org/ 6https://github.com/facebookresearch/ParlAI/blob/master/projects/ wizard_of_wikipedia 5
//github.com/alexa/alexa-prize-topical-chat-dataset/. More details of the benchmarks are shown in supplementary material.
Baselines: the following models are selected as baselines: (1) MTASK-RF [15]: an early model that also realizes knowledge-grounded conversation without crowd-sourced knowledge-grounded dialogues. To make a fair comparison, we implement the model by strictly following the details in [15], but replace the Twitter data, the Foursquare data, and the Twitter handles used to connect the Twitter conversation and the Foursquare facts with the Reddit data, the Wikipedia data, and an aggregate of the topics in the three benchmarks; (2) Transformer Memory Network (TMN)
[10]:6 a transformer architecture augmented by a knowledge memory which is published along with the Wizard data; (3) Incremental Transformer with Deliberation Decoder (ITDD) [24]:7 an encoder-decoder architecture where the encoder incrementally represents multi-turn dialogues and knowledge, and the decoder conducts response decoding in two passes similar to the deliberation network in machine translation; (4) Sequential Knowledge Transformer (SKT) [18]: 8 a sequential latent variable model with state-of-the-art performance on knowledge selection. Since human labels that indicate ground-truth knowledge are crucial to the performance of the model and only provided in Wizard data, so we implement SKT with heuristics on Topical-Chat and CMU_DoG (pseudo supervision created by selecting GT-knowledge using Sim(.,.) with the response). (5) Disentangle
Response Decoder (DRD) [52]: a model that exploits pre-training techniques to tackle the low-resource challenge in knowledge-grounded dialogue generation. We choose the one whose parameters are ﬁne-tuned on the full training data of the benchmarks, as the model exhibits the state-of-the-art performance on Wizard according to [52]. We name our model ZRKGC9, standing for “zero-resource knowledge-grounded conversation” model.
Evaluation Methods: following [10], we choose perplexity (PPL) [37] and unigram F1 as the automatic metrics, where F1 is calculated with the code shared at https://github. com/facebookresearch/ParlAI/blob/master/parlai/core/metrics.py. Be-sides, we also examine the performance of the models with human annotations. Since human labor is expensive, manual judgment is applied to Wizard only. Following [52], we randomly sam-ple 500 examples from Test Seen and Test Unseen, and recruit 3 well-educated native speakers as annotators. To each annotator, an example is presented with a context, the associated external knowledge,10 and model responses (top 1 in beam search) that are randomly shufﬂed to hide their sources. The annotators then judge the quality of the responses from three aspects, including ﬂuency, context coherence and knowledge relevance, and assign a score in {0, 1, 2} (representing “bad”,
“fair”, and “good”) to each response for each aspect. Each response receives 3 scores per aspect, and the agreement among the annotators is measured via Fleiss’ kappa [14]. 3.2
Implementation Details
We index the sentences in the knowledge corpus with an open source Lucene.Net,11 employ the internal ranker of Lucene (basically a BM25 model [31]) as rel(⋅, ⋅), and set the number of retrieved candidates (i.e., l) as 10. The function Sim(⋅, ⋅) in Section 2.2 is deﬁned as Bleu-2 [27]. We choose UNILM Base (110M) and implement the model with the code in https://github.com/ microsoft/unilm. We ﬁnd that replacing DKL(q(Zα)∥p(Zα∣C, Zk)) in Eq. 3 with a mean squared error in optimization can enhance model performance, probably because Zα is a continuous variable. The model is trained with a batch size 10, a maximum input length 256, and a maximum output length 40. The threshold λ and the maximum step M in Algorithm 1 are set as 0.2 and 100, 000 respectively. The learning rate is set as 0.00003 and the warmup step is set as 1000. In training, we evaluate the model per 5, 000 steps on the validation set with unigram F1 [10] as a metric.
The training procedure will be terminated if we ﬁnd F1 begins to drop. To draw a fair comparison, we keep the same evaluation procedure with the existing models. During test time, we exploit beam search with a beam size 5. We apply knowledge selection module p(y∣C, Z) to select K knowledge sentences from all M knowledge sentences(M>=K) to meet the capacity constraint of UniLM(e.g., 256 in our setting). 7https://github.com/lizekang/ITDD 8https://github.com/bckim92/sequential-knowledge-transformer 9Dataset and codes are publicly available at https://github.com/nlpxucan/ZRKGC 10For ease of labeling, only the ground-truth knowledge is shown to the annotators in Wizard. 11http://lucenenet.apache.org 6
Models
MTASK-RF [15]
TMN [10]
ITDD [24]
SKT [18]
DRD [52]
ZRKGC
Table 1: Automatic evaluation results.
Wizard Seen Wizard Unseen Topical Freq Topical Rare CMU_DoG
PPL 65.4 66.5 17.8 52.0 19.4 40.4
F1
PPL
F1
PPL
F1
PPL
F1 67.7 103.6 44.8 81.4 23.0 41.5 13.1 12.3 15.9 14.3 16.2 11.4 19.3 16.1 19.3 17.9 18.7 18.6
Table 2: Human evaluation results. 12.6 16.5 15.8 17.0 14.8 16.6 51.3 30.3 21.4 25.1 25.9 44.2 51.6 52.1 24.7 35.6 28.0 42.0 12.5 14.6 14.0 14.8 15.1 16.8
PPL 67.2 75.2 26.0 41.9 54.4 53.5
F1 10.5 9.9 10.4 9.6 10.7 12.5
Models
Wizard Seen
Wizard Unseen
Fluency Coherence KG Relevance Kappa
Fluency Coherence KG Relevance Kappa
DRD [52]
ZRKGC 1.72 1.79 1.65 1.73 1.12 1.16 0.62 0.61 1.60 1.71 1.57 1.70 1.14 1.18 0.66 0.69 3.3 Evaluation Results
Table 1 reports the evaluation results on automatic metrics. In terms of F1, though ZRKGC does not access any training examples in the benchmarks, it still outperforms MTASK-RF, TMN, and ITDD, and achieves a comparable performance with DRD on all the test sets, indicating that the model can effectively learn how to leverage external knowledge feed for response generation through the variational approach. Moreover, unlike the baselines, there is almost no difference for ZRKGC on
Test Seen and Test Unseen, which reveals the good generalization ability of the model as an advantage of the zero-resource approach: the model is not inﬂuenced by speciﬁc training data, and thus performs stably over different topics. We further investigate the generalization ability of ZRKGC by comparing it with DRD trained on different benchmarks. Figure 2 shows the results. Interestingly, when we transfer the DRD model trained on one benchmark to another benchmark, there is always signiﬁcant performance drop. ZRKGC, on the other hand, is always comparable with the best DRD model on each of the benchmarks, indicating that the model generalizes well not only over different topics but also over different datasets. In other words, DRD may fail in practice due to the discrepancy between training and test, but ZRKGC does not suffer from the issue. ZRKGC is worse than ITDD and DRD in terms of PPL, because PPL is calculated with ground-truth responses in the test sets, and therefore models learned by ﬁtting the same or a similar distribution (e.g., both the training data and the test data are constructed by AMT workers) are more advantageous on the metric. We provide richer results with more metrics in supplementary material.
Table 2 compares ZRKGC with DRD using hu-man judgment. All kapa values exceed 0.6, in-dicating substantial agreement among the anno-tators. We observe that responses from ZRKGC are more ﬂuent and more contextually coherent than those from DRD, thanks to the pre-trained language model. Both models are awkward in terms of properly bringing knowledge into re-sponses, which sheds light on the direction for future effort. Cases for a closer inspection are shown in supplementary material. 3.4 Discussions
Figure 2: Generalization ability over different datasets.
Retrieval posterior v.s. generative posterior. We ﬁrst investigate how the retrieval posterior deﬁned by Eq. 4 matters in learning. To this end, we alternatively implement ZRKGC with a generative posterior (i.e., q(Zk)) that are deﬁned in a sequence-to-sequence form based on UNILM,12 and check the trajectories of Eq. 3 (i.e., the evidence lower bound (ELBO)) in training under
{retrieval, generative} × {GEM, ELBO} where GEM means that the model is learned via generalized
EM, and ELBO means that optimization is conducted only by Eq. 3. Figure 4 illustrates the trajectories. We can see that with the retrieval posterior, we achieve a tighter ELBO by generalized
EM, which means that by optimizing with the E-step, the objective in the M-step moves closer to 12p(Zk∣C) in Eq. 3 is also deﬁned in a generative form. 7
Table 3: Ablation study.
Models
ZRKGC
-Zα
-mulinfo
-retrieval posterior
-parameterized posterior
-knowledge selection
Wizard Seen Wizard Unseen Topical Freq Topical Rare CMU_DoG
PPL 40.4 31.1 40.9 35.4 39.3 44.2
F1 18.7 18.5 18.1 16.2 17.2 18.3
PPL 41.5 32.0 41.9 36.1 40.8 45.9
F1 18.6 18.4 18.0 16.0 17.0 17.9
PPL 44.2 34.2 42.6 39.6 44.7 45.5
F1 16.6 13.9 14.2 13.7 13.2 14.6
PPL 42.0 33.2 39.1 36.8 41.6 43.5
F1 16.8 14.4 15.2 14.6 14.6 14.9
PPL 53.5 53.2 65.7 52.7 50.5 53.8
F1 12.5 10.8 11.7 10.1 10.8 12.0 the true objective. Since we have to resort to high-variance sampling steps to approximate the KL terms as well as the true posterior (i.e., p(Zk∣C, R)) when the generative posterior is used, optimizing with GEM leads to an even worse ELBO than directly executing the M-step. Results in Table 3 also demonstrate that there is a dramatic performance drop (i.e., F1) on the test sets when the retrieval posterior is replaced by a generative posterior (i.e., -retrieval posterior). Moreover, we also observe an obvious drop (i.e., F1) when S(R) in Eq. 4 is squeezed to Ktop = arg maxK∈S(R) Sim(R, K) (i.e., -parameterized posterior), indicating the effect of the neural parameterization in Eq. 4. (a) Wizard Seen (b) Wizard Unseen
Figure 3: Controllability study wrt. knowledge expression.
Impact of Zα and impact of the mutual informa-tion loss. Then we study the effect of Zα in model-ing response generation and the effect of the mutual information loss to learning. First, according to the results in Table 3, both removal of Zα (i.e., ZRKGC becomes a single latent variable model) and removal of the mutual information loss (i.e., -mulinfo) will cause performance drop (i.e., F1), indicating that
Zα is useful to ZRKGC and the mutual information loss can enhance the usefulness of the factor. Recall that Zα is designed to model knowledge expression and the mutual information loss is designed to effec-tively learn the factor from data. Thus, we also want to check if one can control the extent of knowledge expression by varying Zα in ZRKGC. Figure 3a and Figure 3b illustrate the comparison between the full ZRKGC and ZRKGC-mulinfo on Test Seen and Test Unseen respectively, in which Zα is ﬁxed in generation and is increased from 0.1 to 0.9 with 0.1 as the step size, and Sim(R, Zk) is employed as the metric with R the generated response and
Zk the ground-truth knowledge.13 We can see that the gap between the grounding rate of generation and the value of Zα we set before generation is smaller in the full model than that in the ablated model when Zα > 0.2, indicating that with the mutual information loss, Zα can effectively encode the information of knowledge expression through the variational learning approach. Note that Zα becomes weak in ZRKGC when it exceeds 0.5. This is because data with such grounding rates are sparse in training.
Figure 4: Trajectories of ELBO in training on Wiz-ard. 13For the sake of controllability study, we make sure that the ground-truth knowledge annotated by humans is involved in generation. 8
Impact of the knowledge selection loss. Finally we explored the role of knowledge selection loss.
Our knowledge selection model is mainly to shorten the input sequence of knowledge candidates, while previous work [18] focuses on selecting top-1 knowledge. This obvious difference decided that the performance drop is not signiﬁcant when replacing knowledge selection module with random selection module according to the results in Table 3. 4
Abstract
Voting systems have a wide range of applications including recommender systems, web search, product design and elections. Limited by the lack of general-purpose analytical tools, it is difﬁcult to hand-engineer desirable voting rules for each use case. For this reason, it is appealing to automatically discover voting rules geared towards each scenario. In this paper, we show that set-input neural network archi-tectures such as Set Transformers, fully-connected graph networks and DeepSets are both theoretically and empirically well-suited for learning voting rules. In particular, we show that these network models can not only mimic a number of ex-isting voting rules to compelling accuracy — both position-based (such as Plurality and Borda) and comparison-based (such as Kemeny, Copeland and Maximin) — but also discover near-optimal voting rules that maximize different social welfare functions. Furthermore, the learned voting rules generalize well to different voter utility distributions and election sizes unseen during training. 1

Introduction
Voting systems are highly prevalent in our daily lives. Examples range from large scale demo-cratic elections to company or family-wide decision making, recommender systems and product design [Boutilier et al., 2015].
As with any social decision-making process, the goal of designing voting rules is to reconcile differences and maximize some collective objective. The area of research that studies different voting rules and the approaches to designing them is called voting theory.
A vast number of voting rules have been proposed over the years. Among them is the widely applied plurality rule. Despite being simple and intuitive, the plurality rule is very limited in that it does not consider the strength of voters’ preferences. Other examples of voting rules, such as Borda and
Copeland, take into consideration the ranked preferences of the voters.
Voting theorists have developed different approaches to designing voting rules. For example, the axiomatic approach constrains the voting rules to satisfy certain desired properties (axioms) such as anonymity (treating all voters equally) and neutrality (treating all candidates equally). The utilitarian approach, on the other hand, aims to maximize a pre-deﬁned notion of social welfare — a scalar quantity that measures the quality of the elected candidate in the eyes of the electorate.
There are major hurdles to overcome in the traditional way of designing and implementing voting rules. First, the celebrated Arrow’s Theorem states the nonexistence of non-dictatorship voting rules that simultaneously satisfy a set of seemingly sensible axioms [Arrow et al., 1951]. Second, for some voting rules such as the ones based on pairwise comparisons, ﬁnding the winner can be computationally expensive, making them infeasible for large-scale applications. Last but not least, for the utilitarian approach, it is not obvious how to design voting rules that maximize a given notion
∗Equal contribution. 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
of social welfare.2 There might be a diverse set of social welfare functions of interest, but theory is lacking in ﬁnding their corresponding optimal voting rules.
In this paper, we aim to tackle the latter two limitations using neural networks. While doing so, we also seek to preserve certain desired properties such as voter anonymity. In particular, we identify three permutation-invariant neural network (PIN) architectures: DeepSet [Zaheer et al., 2017], Set
Transformer [Lee et al., 2019], and Graph Isomorphism Network (GIN) [Xu et al., 2018], and apply them to learn the voting rules. As compact and universal function approximators, such trained neural networks not only address the computational burden of some voting rules, but also provide a ﬂexible approach to maximize a diverse set of social welfare functions.
The main contributions of this paper include:
• We show that PIN architectures are theoretically and empirically well-suited for learning to represent voting rules. Theoretically, we show that the three PIN architectures are universal approximators in the space of permutation-invariant functions. This includes a novel proof on the universality of Graph Isomorphism Networks with fully-connected graphs (as in learning voting rules).
• We apply the aforementioned PIN models to mimic ﬁve classical voting rules: plurality,
Borda, Copeland, Maximin and Kemeny. We show that they can mimic these voting rules to compelling accuracy and can generalize seamlessly to unseen real datasets and elections with an unseen number of voters.
• We train the networks to maximize two different social welfare functions — utilitarian and egalitarian — on elections sampled using three different underlying voter utility distributions.
We show that the PIN models discover novel voting rules that maximize social welfare better than classical voting rules. In cases where theoretical optimal voting rules are known (i.e. for the utilitarian social welfare function), the PIN models match the optimal performance.
The organization of this paper is as follows. Section 2 provides background on voting theory.
Section 3 describes our method of using PINs to learn voting rules. Speciﬁcally, we introduce the permutation-invariant network architectures (Section 3.1), show the universality results (Section 3.2), and describe the proposed the training procedure for learning voting rules in detail. In Section 4, we show comprehensive experiment results on the effectiveness of PIN models in learning voting rules.
We discuss related works in Section 5, limitations in Section 6 and conclude with Section 7. 2
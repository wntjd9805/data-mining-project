Abstract
Probabilistic circuits (PCs) are a powerful modeling framework for representing tractable probability distributions over combinatorial spaces. In machine learning and probabilistic programming, one is often interested in understanding whether the distributions learned using PCs are close to the desired distribution. Thus, given two probabilistic circuits, a fundamental problem of interest is to determine whether their distributions are close to each other.
The primary contribution of this paper is a closeness test for PCs with respect to the total variation distance metric. Our algorithm utilizes two common PC queries, counting and sampling. In particular, we provide a poly-time probabilistic algorithm to check the closeness of two PCs, when the PCs support tractable approximate counting and sampling. We demonstrate the practical efﬁciency of our algorithmic framework via a detailed experimental evaluation of a prototype implementation against a set of 475 PC benchmarks. We ﬁnd that our test correctly decides the closeness of all 475 PCs within 3600 seconds. 1

Introduction
Probabilistic modeling is at the heart of modern computer science, with applications ranging from image recognition and image generation [29, 30] to weather forecasting [3]. Probabilistic models have a multitude of representations, such as probabilistic circuits (PCs) [9], graphical models [19], generative networks [16], and determinantal point processes [20]. Of particular interest to us are PCs, which are known to support guaranteed inference and thus have applications in safety-critical ﬁelds such as healthcare [2, 25]. In this work, we will focus on PCs that are fragments of the Negation
Normal Form (NNF), speciﬁcally DNNFs, d-DNNFs, SDNNFs, and PIs [13]. We refer to the survey by Choi et al. [9] for more details regarding PCs.
Given two distributions P and Q, a fundamental problem is to determine whether they are close.
Closeness between distributions is frequently quantiﬁed using the total variation (TV) distance, dT V (P, Q) = (1/2)(cid:107)P − Q(cid:107)1, where (cid:107) · (cid:107) is the (cid:96)1 norm [21, 6]. Thus, stated formally, closeness testing is the problem of deciding whether dT V (P, Q) ≤ ε or dT V (P, Q) ≥ η for 0 ≤ ε < η ≤ 1.
Determining the closeness of models has applications in AI planning [13], bioinformatics [31, 33, 35] and probabilistic program veriﬁcation [15, 23].
Equivalence testing is a special case of closeness testing, where one tests if dT V (P, Q) = 0. Darwiche and Huang [13] initiated the study of equivalence testing of PCs by designing an equivalence test for d-DNNFs. An equivalence test is, however, of little use in contexts where the PCs under test
∗The accompanying tool, available open source, can be found at https://github.com/meelgroup/teq. The
Appendix is available in the accompanying supplementary material.
†The authors decided to forgo the old convention of alphabetical ordering of authors in favor of a randomized ordering, denoted by r(cid:13). The publicly veriﬁable record of the randomization is available at https://www.aeaweb.org/journals/policies/random-author-order/search with conﬁrmation code: icoxrj0sNB2L. For citation of the work, authors request that the citation guidelines by AEA for random author ordering be followed. 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
encode non-identical distributions that are nonetheless close enough for practical purposes. Such situations may arise due to the use of approximate PC compilation [10] and sampling-based learning of PCs [26, 27]. As a concrete example, consider PCs that are learned via approximate methods such as stochastic gradient descent [27]. In such a case, PCs are likely to converge to close but non-identical distributions. Given two such PCs, we would like to know whether they have converged to distributions close to each other. Thus, we raise the question: Does there exist an efﬁcient algorithm to test the closeness of two PC distributions?
In this work, we design the ﬁrst closeness test for PCs with respect to TV distance, called Teq.
Assuming the tested PCs allow poly-time approximate weighted model counting and sampling, Teq runs in polynomial time. Formally, given two PC distributions P and Q, and three parameters (ε,η,δ), for closeness(ε), farness(η), and tolerance(δ), Teq returns Accept if dT V (P, Q) ≤ ε and Reject if dT V (P, Q) ≥ η with probability at least 1 − δ. Teq makes atmost O((η − ε)−2 log(δ−1)) calls to the sampler and exactly 2 calls to the counter.
Teq builds on a general distance estimation technique of Canonne and Rubinfeld [4] that estimates the distance between two distributions with a small number of samples. In the context of PCs, the algorithm requires access to an exact sampler and an exact counter. Since not all PCs support exact sampling and counting, we modify the technique presented in [4] to allow for approximate samples and counts. Furthermore, we implement and test Teq on a dataset of publicly available PCs arising from applications in circuit testing. Our results show that closeness testing can be accurate and scalable in practice.
For some NNF fragments, such as DNNF, no sampling algorithm is known, and for fragments such as PI, sampling is known to be NP-hard [32]. Since Teq requires access to approximate weighted counters and samplers to achieve tractability, the question of determining the closeness of the PCs mentioned above remains unanswered. Thus, we investigate further and characterize the complexity of closeness testing for a broad range of PCs. Our characterization reveals that PCs from the fragments d-DNNFs and SDNNFs can be tested for closeness in poly-time via Teq, owing to the algorithms of Darwiche [11] and Arenas et al. [1]. We show that the SDNNF approximate counting algorithm of Arenas et al. [1] can be extended to log-linear SDNNFs using chain formulas [8]. Then, using previously known results, we also ﬁnd that there are no poly-time equivalence tests for PCs from PI and DNNF, conditional on widely believed complexity-theoretic conjectures. Our characterization also reveals some open questions regarding the complexity of closeness and equivalence testing of
PCs.
The rest of the paper is organized in the following way. We deﬁne the notation and discuss related work in Section 2. We then present the main contribution of the paper, the closeness test Teq, and the associated proof of correctness in Section 3. We present our experimental ﬁndings in Section 4, and then discuss the complexity landscape of closeness testing in Section 5. We conclude the paper and discuss some open problems in Section 6. Due to space constraints, we defer some proofs to the supplementary Section A. 2
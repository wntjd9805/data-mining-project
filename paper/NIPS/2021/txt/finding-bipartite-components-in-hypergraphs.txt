Abstract
Hypergraphs are important objects to model ternary or higher-order relations of objects, and have a number of applications in analysing many complex datasets
In this work we study a new heat diffusion process in occurring in practice. hypergraphs, and employ this process to design a polynomial-time algorithm that approximately ﬁnds bipartite components in a hypergraph. We theoretically prove the performance of our proposed algorithm, and compare it against the previous state-of-the-art through extensive experimental analysis on both synthetic and real-world datasets. We ﬁnd that our new algorithm consistently and signiﬁcantly outperforms the previous state-of-the-art across a wide range of hypergraphs. 1

Introduction
Spectral methods study the efﬁcient matrix representation of graphs and datasets, and apply the algebraic properties of these matrices to design efﬁcient algorithms. Over the last three decades, spectral methods have become one of the most powerful techniques in machine learning, and have had comprehensive applications in a wide range of domains, including clustering [24, 31], image and video segmentation [26], and network analysis [25], among many others. While the success of this line of research is based on our rich understanding of Laplacian operators of graphs, there has been a sequence of very recent work studying non-linear Laplacian operators for more complex objects (i.e., hypergraphs) and employing these non-linear operators to design hypergraph algorithms with better performance. 1.1 Our contribution
In this work, we study the non-linear Laplacian-type operators for hypergraphs, and employ such an operator to design a polynomial-time algorithm for ﬁnding bipartite components in hypergraphs. The main contribution of our work is as follows:
First of all, we introduce and study a non-linear Laplacian-type operator JH for any hypergraph H.
While we’ll formally deﬁne the operator JH in Section 3, one can informally think about JH as a variant of the standard non-linear hypergraph Laplacian LH studied in [5, 20, 27], and this variation is needed to study the other end of the spectrum of LH . We present a polynomial-time algorithm that ﬁnds some eigenvalue λ and its associated eigenvector of JH , and our algorithm is based on the following heat diffusion process: starting from an arbitrary vector f0 ∈ Rn that describes the initial heat distribution among the vertices, we use f0 to construct some 2-graph1 G0, and use the diffusion process in G0 to represent the one in the original hypergraph H and update ft; this process continues until the time at which G0 cannot be used to appropriately simulate the diffusion process in H any more. At this point, we use the currently maintained ft to construct another 2-graph Gt 1Throughout the paper, we refer to non-hyper graphs as 2-graphs. Similarly, we always use LH to refer to the non-linear hypergraph Laplacian operator, and use LG as the standard 2-graph Laplacian. 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
v1 v2 0.5 0.5 v3
→ v4
→ v5 v6







 1 0

 0

 0
 0
 0 ft t = 0













 0.29
−0.14
−0.14 0.02 0.02 0.02 0.5 0.5
→ 0.62 0.62
→ 1.0 0.38 0.38 ft t = 1






 0.11
−0.09
−0.09 0.04 0.04 0.04







→ 0.5 0.5 1.0 1.0 0.5 0.25 0.25
→






 0.09
−0.71
−0.71 0.03 0.03 0.03






 0.5 0.5 1.0 1.0
→
→ 0.5 0.5






 0.03
−0.03
−0.03 0.03
−0.03
−0.03






 ft t = 3 ft t = 4 ft t = 23
Figure 1: Illustration of our proposed diffusion process. In each time step, we construct a 2-graph G based on the current vector ft, and update ft with the JG operator. Notice that the graph G changes throughout the execution of the algorithm, and that the ﬁnal ft vector can be used to partition the vertices of H into two well-connected sets (all the edges are adjacent to both sets), by splitting according to positive and negative entries.
This speciﬁc example with ft values is generated by the publicly available implementation of our algorithm. to simulate the diffusion process in H, and update ft. This process continues until the vector ft converges; see Figure 1 for illustration. We theoretically prove that this heat diffusion process is unique, well-deﬁned, and our maintained vector ft converges to some eigenvector of JH . While this result is quite interesting on its own and forms the basis of our second result, our analysis shows that, for certain hypergraphs H, both the operator JH and LH could have ω(1) eigenvectors. This result answers an open question in [5], which asks whether LH could have more than 2 eigenvectors2.
Secondly, we present a polynomial-time algorithm that, given a hypergraph H = (VH , EH , w) as input, ﬁnds disjoint subsets L, R ⊂ VH that are highly connected with each other. The key to our algorithm is a Cheeger-type inequality for hypergraphs that relates the spectrum of JH and the bipartiteness ratio of H, an analog of βG studied in [28] for 2-graphs. Both the design and analysis of our algorithm is inspired by [28], however our analysis is much more involved because of the non-linear operator JH and hyperedges of different ranks. Our second result alone answers an open question posed by [33], which asks whether there is a hypergraph operator which satisﬁes a
Cheeger-type inequality for bipartiteness.
The signiﬁcance of our work is further demonstrated by extensive experimental studies of our algorithms on both synthetic and real-world datasets. In particular, on the well-known Penn Treebank corpus that contains 49, 208 sentences and over 1 million words, our purely unsupervised algorithm is able to identify a signiﬁcant fraction of verbs from non-verbs in its two output clusters. Hence, we believe that our work could potentially have many applications in unsupervised learning for hypergraphs. Using the publicly available code of our implementation, we welcome the reader to explore further applications of our work in even more diverse datasets. 1.2
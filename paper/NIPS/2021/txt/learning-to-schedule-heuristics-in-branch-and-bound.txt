Abstract
Primal heuristics play a crucial role in exact solvers for Mixed Integer Programming (MIP). While solvers are guaranteed to ﬁnd optimal solutions given sufﬁcient time, real-world applications typically require ﬁnding good solutions early on in the search to enable fast decision-making. While much of MIP research focuses on designing effective heuristics, the question of how to manage multiple MIP heuristics in a solver has not received equal attention. Generally, solvers follow hard-coded rules derived from empirical testing on broad sets of instances. Since the performance of heuristics is problem-dependent, using these general rules for a particular problem might not yield the best performance. In this work, we propose the ﬁrst data-driven framework for scheduling heuristics in an exact MIP solver.
By learning from data describing the performance of primal heuristics, we obtain a problem-speciﬁc schedule of heuristics that collectively ﬁnd many solutions at minimal cost. We formalize the learning task and propose an efﬁcient algorithm for computing such a schedule. Compared to the default settings of a state-of-the-art academic MIP solver, we are able to reduce the average primal integral by up to 49% on two classes of challenging instances. 1

Introduction
Many decision-making problems arising from real-world applications can be formulated using Mixed
Integer Programming (MIP). The Branch and Bound (B&B) framework is a general approach to solving MIPs to global optimality. Over the recent years, the idea of using machine learning (ML) to improve optimization techniques has gained renewed interest. There exist various approaches to tackle different aspects of the solving process using classical ML techniques. For instance, ML has been used to ﬁnd good parameter conﬁgurations for a solver (Hutter et al., 2009, 2011), improve node (He et al., 2014), variable (Khalil et al., 2016; Gasse et al., 2019; Nair et al., 2020) or cut (Baltean-Lugojan et al., 2019) selection strategies, and detect decomposable structures (Kruber et al., 2017).
Even though exact MIP solvers aim for global optimality, ﬁnding good feasible solutions fast is at least as important, especially in the presence of a time limit. The use of primal heuristics is crucial to 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
Figure 1: Average solution success rates of ten heuristics for two problem classes. Heuristic success is problem-dependent: each pair of blue-yellow bars belongs to one heuristic, and the heuristics are sorted in descending order w.r.t. the solution success rates for GISP (blue).
Figure 2: Primal gap for an exemplary
GISP instance. Our method’s heuristic schedule (orange) obtains better solutions ear-lier than SCIP’s default (blue). ensuring good primal performance in modern solvers. For instance, Berthold (2013a) showed that the primal bound–the objective value of the best solution–improved on average by around 80% when primal heuristics were used. Generally, a solver includes a variety of primal heuristics, where each class of heuristics (e.g., rounding, diving, large-neighborhood search) exploits a different idea to ﬁnd good solutions. During B&B, some of these heuristics are executed successively at each node of the search tree, and improved solutions, if any, are reported back to the solver. An extensive overview of different primal heuristics, their computational costs, and their impact in MIP solving can be found in
Lodi (2013); Berthold (2013b, 2018).
Since most heuristics can be very costly, it is necessary to be strategic about the order in which the heuristics are executed and the number of iterations allocated to each. Such decisions are often made by following hard-coded rules derived from testing on broad benchmark test sets. While these static rules yield good performance on average, their performance can be far from satisfactory when considering speciﬁc families of instances. To illustrate this fact, Figure 1 compares the solution success rates, i.e., the fraction of calls to a heuristic where a solution was found, of different primal heuristics for two problem classes: the Generalized Independent Set Problem (GISP) (Hochbaum and
Pathria, 1997; Colombi et al., 2017) and the Fixed-Charge Multicommodity Network Flow Problem (FCMNF) (Hewitt et al., 2010).
In this paper, we propose a data-driven approach to systematically improve the use of primal heuristics in B&B. By learning from data about the duration and success of every heuristic call for a set of training instances, we construct a schedule of heuristics that speciﬁes the ordering and duration for which each heuristic should be executed to obtain good primal solutions early on. As a result, we are able to signiﬁcantly improve the use of primal heuristics as shown in Figure 2 for one MIP instance.
Contributions. Our main contributions can be summarized as follows: 1. We formalize the learning task of ﬁnding an effective, cost-efﬁcient heuristic schedule on a training dataset as a Mixed Integer Quadratic Program (Section 3); 2. We propose an efﬁcient heuristic for solving the training (scheduling) problem and a scalable data collection strategy (Sections 4 and 5); 3. We perform extensive computational experiments on a class of challenging instances and demonstrate the beneﬁts of our approach (Section 6).
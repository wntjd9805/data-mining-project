Abstract
This paper introduces the PettingZoo library and the accompanying Agent Envi-ronment Cycle (“AEC”) games model. PettingZoo is a library of diverse sets of multi-agent environments with a universal, elegant Python API. PettingZoo was developed with the goal of accelerating research in Multi-Agent Reinforcement
Learning (“MARL”), by making work more interchangeable, accessible and re-producible akin to what OpenAI’s Gym library did for single-agent reinforcement learning. PettingZoo’s API, while inheriting many features of Gym, is unique amongst MARL APIs in that it’s based around the novel AEC games model. We argue, in part through case studies on major problems in popular MARL envi-ronments, that the popular game models are poor conceptual models of games commonly used in MARL and accordingly can promote confusing bugs that are hard to detect, and that the AEC games model addresses these problems. 1

Introduction
Multi-Agent Reinforcement Learning (MARL) has been behind many of the most publicized achieve-ments of modern machine learning — AlphaGo Zero [Silver et al., 2017], OpenAI Five [OpenAI, 2018], AlphaStar [Vinyals et al., 2019]. These achievements motivated a boom in MARL research, with Google Scholar indexing 9,480 new papers discussing multi-agent reinforcement learning in 2020 alone. Despite this boom, conducting research in MARL remains a signiﬁcant engineering
∗Swarm Labs
†Department of Computer Science | University of Maryland, College Park
‡Department of Electrical and Computer Engineering | University of Maryland, College Park
§Department of Mechanical Engineering | University of Maryland, College Park
¶Maryland Robotics Center | University of Maryland, College Park (cid:107)Faculty of Electrical Engineering and Computer Science | Technical University of Berlin 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
challenge. A large part of this is because, unlike single agent reinforcement learning which has
OpenAI’s Gym, no de facto standard API exists in MARL for how agents interface with environments.
This makes the reuse of existing learning code for new purposes require substantial effort, consuming researchers’ time and preventing more thorough comparisons in research. This lack of a standardized
API has also prevented the proliferation of learning libraries in MARL. While a massive number of
Gym-based single-agent reinforcement learning libraries or code bases exist (as a rough measure 669 pip-installable packages depend on it at the time of writing GitHub [2021]), only 5 MARL libraries with large user bases exist [Lanctot et al., 2019, Weng et al., 2020, Liang et al., 2018, Samvelyan et al., 2019, Nota, 2020]. The proliferation of these Gym based learning libraries has proved essential to the adoption of applied RL in ﬁelds like robotics or ﬁnance and without them the growth of applied
MARL is a signiﬁcantly greater challenge. Motivated by this, this paper introduces the PettingZoo library and API, which was created with the goal of making research in MARL more accessible and serving as a multi-agent version of Gym.
Prior to PettingZoo, the numerous single-use MARL APIs almost exclusively inherited their design from the two most prominent mathematical models of games in the MARL literature—Partially
Observable Stochastic Games (“POSGs”) and Extensive Form Games (“EFGs”). During our develop-ment, we discovered that these common models of games are not conceptually clear for multi-agent games implemented in code and cannot form the basis of APIs that cleanly handle all types of multi-agent environments.
To solve this, we introduce a new formal model of games, Agent Environment Cycle (“AEC”) games that serves as the basis of the PettingZoo API. We argue that this model is a better conceptual ﬁt for games implemented in code. and is uniquely suitable for general MARL APIs. We then prove that any AEC game can be represented by the standard POSG model, and that any POSG can be represented by an AEC game. To illustrate the importance of the AEC games model, this paper further covers two case studies of meaningful bugs in popular MARL implementations. In both cases, these bugs went unnoticed for a long time. Both stemmed from using confusing models of games, and would have been made impossible by using an AEC games based API.
The PettingZoo library can be installed via pip install pettingzoo, the documentation is avail-able at https://www.pettingzoo.ml, and the repository is available at https://github.com/
Farama-Foundation/PettingZoo. 2
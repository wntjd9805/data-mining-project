Abstract
The (partial) ranking loss is a commonly used evaluation measure for multi-label classiﬁcation, which is usually optimized with convex surrogates for computational efﬁciency. Prior theoretical efforts on multi-label ranking mainly focus on (Fisher) consistency analyses. However, there is a gap between existing theory and practice
— some inconsistent pairwise losses can lead to promising performance, while some consistent univariate losses usually have no clear superiority in practice. To take a step towards ﬁlling up this gap, this paper presents a systematic study from two complementary perspectives of consistency and generalization error bounds of learning algorithms. We theoretically ﬁnd two key factors of the distribution (or dataset) that affect the learning guarantees of algorithms: the instance-wise class imbalance and the label size c. Speciﬁcally, in an extremely imbalanced case, the algorithm with the consistent univariate loss has an error bound of O(c), while c) as shown in prior the one with the inconsistent pairwise loss depends on O( work. This may shed light on the superior performance of pairwise methods in practice, where real datasets are usually highly imbalanced. Moreover, we present an inconsistent reweighted univariate loss-based algorithm that enjoys an error bound of O( c) for promising performance as well as the computational efﬁciency of univariate losses. Finally, experimental results conﬁrm our theoretical ﬁndings.
√
√ 1

Introduction
Multi-Label Classiﬁcation (MLC) [1] is an important task, in which each instance is associated with multiple labels simultaneously. It has been widely applied to text categorization [2], bioinformatics [3], multimedia annotation [4], information retrieval [5]. Various measures [6, 7] have been developed to evaluate MLC’s performance from diverse aspects owing to its complexity. Among them, the ranking loss (RL) (or partial ranking loss, PRL) [2, 8] is a commonly used measure in practice (or in theory).
Formally, the RL calculates the fraction of pairs that a positive label does not precede a negative label according to the rank given by a score function (or predictor). Minimizing such a loss is usually referred to as Multi-Label Ranking (MLR) [9], which is the consideration in this paper.
Since RL is non-convex and discontinuous, existing methods [6] seek to optimize certain convex surrogate losses for computational efﬁciency. These surrogate losses can be divided into two main categories: pairwise ones [8] and univariate ones [9], which have their own advantages and limitations in terms of computational costs, theory and empirical performance.
∗Equal contribution. G. Wu is now at School of Software, Shandong University and C. Li is now at Gaoling
School of AI, Renmin University of China. The work was done when they were at Tsinghua University.
†Corresponding author 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
Table 1: Summary of the main theoretical results. Contributions of this paper are highlighted in red.
Generalization bound
Algorithm
Surrogate loss
Apa
Au1
Au2
Au3
Au4 pairwise (Lpa) univariate (Lu1 ) univariate (Lu2 ) reweighted univariate (Lu3 ) reweighted univariate (Lu4 ) extremely imbalanced
S (f ) + O((cid:112) c
ˆRpa n ) (cid:113) c2
S (f ) + O( n ) (cid:113) c ˆRu1 (c − 1) ˆRu2
S (f ) + O(
S (f ) + O((cid:112) c
ˆRu3 n ) (cid:113) c2
S (f ) + O( n )
ˆRu4 balanced
ˆRpa
S (f ) + O( 2 ˆRu1
S (f ) + O( c2 n ) c
ˆRu2 2
ˆRu3
S (f ) + O(
S (f ) + O(
ˆRu4
S (f ) + O(
Consistencya Computation
×
×
√b
×
×
O(c2)
O(c)
O(c)
O(c)
O(c) (cid:113) 1 n ) (cid:113) 1 n ) (cid:113) 1 n ) (cid:113) 1 n ) (cid:113) 1 n ) aThis is in terms of the PRL. Besides, these surrogate losses are all inconsistent w.r.t. the RL. bThis is for the cases where the base loss is the exponential, logistic, least squared or squared hinge loss.
Computationally, the pairwise losses, deﬁned over pairs of positive and negative labels, have a com-plexity depending on O(c2) (c is the number of labels), while the univariate ones enjoy a complexity depending on O(c). The superiority of the latter is signiﬁcant when c is large. Theoretically, the pairwise losses are not (Fisher) consistent w.r.t. the RL or the PRL [8], while, remarkably, certain univariate ones are consistent w.r.t. the PRL [9, 8]. Empirically, however, the consistent univariate losses usually have no signiﬁcant superiority compared to the inconsistent pairwise losses [9]. In fact, we observed that the former under-perform the latter on 10 MLR benchmarks (see results in Table 3).
Towards ﬁlling the gap between the existing theory and practice, this paper attempts to rigorously answer the following questions: Why inconsistent pairwise losses usually achieve better performance than consistent univariate losses in practice? How to improve the univariate loss, which is preferable due to its computational efﬁciency? A natural explanation of this gap is that although the (Fisher) consistency [10, 11] provides valuable insights in the asymptotic cases, it cannot fully characterize the behaviour of a surrogate loss when the number of training samples is not sufﬁciently large and the hypothesis space is not realizable.
√
Therefore, this paper presents a systematic study in a complementary perspective of generalization error bounds [12] besides the consistency. We theoretically ﬁnd two key factors of the distribution (or dataset) that affect the learning guarantees of algorithms: the instance-wise class imbalance and the label number c. Given extremely imbalanced data (i.e., the worst case), we prove that the consistent univariate losses based algorithms lead to an error bound of O(c) while the pairwise losses based ones c) [13], which explains the empirical behaviour better on enjoy an error bound depending on O( real datasets which are usually highly imbalanced (see Table 3). Further, we present two reweighted surrogate univariate losses that employ carefully designed penalties for positive and negative labels.
Then, we analyze their consistency and generalization bounds of the corresponding algorithms. c) in the
Surprisingly, though not consistent, one of them enjoys an error bound depending on O( worst case, which is nearly the same as the pairwise losses, and retains the computational efﬁciency.
For balanced data (i.e., the best case), we also ﬁnd that all these surrogate univariate losses share the same learning guarantees, with no dependence on c which is the same as the surrogate pairwise ones.
Notably, in this case, these bounds are different from the classical probably approximately correct (PAC) ones [14, 12, 15] which hold for all distributions (i.e. the worst case). Our main theoretical results are summarized in Table 1. Experimental results also conﬁrm our theoretical ﬁndings.
√ 2 Preliminaries
In this section, we ﬁrst introduce the problem setting of MLC and MLR. Then, we present the evaluation measures, risk, and regret of MLR.
Notations. Let boldface lower and capital case letters denote vectors (e.g., a) and matrices (e.g., A) respectively. For a matrix A, ai, aj and aij denote its i-th row, j-th column, and (i, j)-th element respectively. For a vector a, ai denote its i-th element. For a set, | · | denotes the cardinality. [[π]] denotes the indicator function, i.e., [[π]] = 1 if the proposition π holds and 0 otherwise. 2
2.1 Problem Setting
Let x ∈ X ⊂ Rd and y ∈ Y ⊂ {−1, +1}c denote the input and output respectively, where d is the feature dimension, c is the label size. yj = 1 (or −1) indicates that the associated j-th label is relevant (or irrelevant). Given a training set S = {(xi, yi)}n i=1 of n samples i.i.d. drawn from a distribution
P over X × Y, the original goal of MLC is to learn a multi-label classiﬁer H : Rd → {−1, +1}c.
To solve MLC, a common approach is to ﬁrst learn a vector-based score function (or predictor) f = [f1, ..., fc] : Rd → Rc and then get the classiﬁer H by a thresholding function. Multi-Label
Ranking (MLR) aims to learn the best predictor from the ﬁnite training data in terms of some ranking-based measures, which is our consideration in this paper. 2.2 Evaluation Measures
To evaluate the performance of different approaches for MLR, many measures have been developed.
Here we focus on two widely-used measures in practice (or theory), which are deﬁned below.3
Ranking Loss (RL):
L0/1 r (f (x), y) = 1 y ||S− y |
|S+ (cid:88)
[[fp(x) ≤ fq(x)]], (1) (p,q)∈S+ y ×S− y where S+ y (or S− y ) denotes the relevant (or irrelevant) label index set induced by y.
Partial Ranking Loss (PRL):4 1 y ||S− y | pr (f (x), y) =
L0/1
|S+ (cid:88) (cid:20)
[[fp(x) < fq(x)]] + (p,q)∈S+ y ×S− y
[[fp(x) = fq(x)]] (cid:21)
. (2) 1 2
Note that the only difference between these two measures is the penalty when fp(x) = fq(x) holds. Besides, it is easy to verify that RL upper bounds PRL, i.e. L0/1 (f (x), y).
Although these two measures are almost the same in practice for the evaluation of one algorithm, they have different consistency properties for some surrogate losses theoretically [8]. pr (f (x), y) ≤ L0/1 r 2.3 Risk and Regret
Since RL is non-convex and discontinuous, often leading to NP-hard problems [16], it is optimized with convex surrogates in practice for computational efﬁciency. Deﬁne a surrogate loss Lφ : Rc ×
{−1, +1}c → R+, where φ indicates the speciﬁc surrogate loss and will be detailed in the next section. Besides, deﬁne a vector-based predictor class F = {f : X → Rc}. For a predictor f ∈ F, its true (0/1) expected risk, surrogate expected risk, and surrogate empirical risk are deﬁned as:
R0/1(f ) = E (x,y)∼P
[L0/1(f (x), y)], Rφ(f ) = E (x,y)∼P
[Lφ(f (x), y)], ˆRS(f ) = 1 n n (cid:88) i=1
Lφ(f (xi), yi).
Besides, we use a superscript (i.e., pr or r) to distinguish the risks for speciﬁc measures. Further, for convenience, we denote the expected risk conditioned on an instance x (i.e., the conditional risk) as:
R(f |x) =
E y∼P (y|x)
[L(f (x), y)|x] = (cid:88) y
L(f (x), y)P (y|x), (3) where L denotes the true or surrogate loss. Thus, the expected risk of f is R(f ) = Ex∼P (x)[R(f |x)].
For each x, given the conditional distribution P (y|x), we can get its optimal predictions as follows:5 (cid:88) f ∗(x) = arg min
L(a, y)P (y|x), (4) y where f ∗ is called the Bayes predictor w.r.t. the loss L. Besides, the expected risk of f ∗ (i.e., R(f ∗)) is called the Bayes risk, which is the minimal expected risk w.r.t. the loss L and denoted by R∗ for a∈Rc 3Our deﬁnition is over one sample and can be averaged over multiple samples. 4Minimizing the PRL is equivalent to maximize the instance-AUC. 5Notably, the optimal predictions can be not just one value but a set with many elements that share the same minimal conditional risk. 3
convenience. Then, we can deﬁne the regret (a.k.a. excess risk) of a predictor f w.r.t. the true and surrogate loss as follows.
Reg0/1(f ) = R0/1(f ) − R∗ (5)
Besides, we also use a superscript (i.e., pr or r) to distinguish the regrets for speciﬁc measures.
Moreover, let ˆfn denote the learned predictor from ﬁnite training data S. Note that our goal is to ﬁnd a predictor ˆfn that achieves the minimal true regret (i.e. Reg0/1( ˆfn)) as possible as it can.
Regφ(f ) = Rφ(f ) − R∗
φ. 0/1, 3 Methods
In this section, we ﬁrst introduce several speciﬁc surrogate losses. Then, we present their associated learning algorithms. 3.1 Surrogate Losses
To optimize the RL, it is natural to employ the convex surrogate pairwise loss [2, 3, 17, 18] as:
Lpa(f (x), y) = 1 y ||S− y |
|S+ (cid:88) (p,q)∈S+ y ×S− y (cid:96)(fp(x) − fq(x)). (6) where the base (margin-based) convex loss (cid:96)(z) can be deﬁned in various popular forms, such as the exponential loss (cid:96)(z) = e−z, the logistic loss (cid:96)(z) = ln(1 + e−z), the hinge loss (cid:96)(z) = max{0, 1 − z}, and squared hinge loss (cid:96)(z) = (max{0, 1 − z})2. A common property is that the base convex surrogate loss upper bounds the original 0/1 loss,6 i.e., [[z ≤ 0]] ≤ (cid:96)(z).
Besides, the surrogate univariate loss, which primarily aims to optimize Hamming loss [19, 13], can also be viewed as a surrogate loss for the RL, which is deﬁned as follows:
Lu1 (f (x), y) = 1 c c (cid:88) j=1 (cid:96)(yjfj(x)). (7)
Notably, Lu1 cannot strictly upper bound the RL, i.e. L0/1 presents the consistent surrogate univariate loss [9, 8] w.r.t. PRL, which is deﬁned as follows: (f (x), y) (cid:2) Lu1(f (x), y). Previous work r
Lu2(f (x), y) = 1 y ||S− y |
Again, the consistent surrogate loss Lu2 cannot strictly upper bound the RL either. Notably, when the surrogate loss strictly upper bounds the 0/1 loss, the true (0/1) risk can be upper bounded by the surrogate risk too, which is crucial for its generalization analysis. Thus, we present two reweighted convex surrogate univariate losses, which strictly upper bound RL and PRL, deﬁned as below. (cid:96)(yjfj(x)).
|S+ (8) j=1 c (cid:88)
Lu3(f (x), y) =
Lu4(f (x), y) = (cid:80) p∈S+ y (cid:96)(ypfp(x))
|S+ y |
+ (cid:80) q∈S− y (cid:96)(yqfq(x))
|S− y | 1 y |, |S− min{|S+ y |} c (cid:88) j=1 (cid:96)(yjfj(x)).
, (9) (10)
For a clear presentation, we will formally discuss their relationships in the next section. 3.2 Learning Algorithms
In the following, we consider the kernel-based learning algorithms which have been widely used in practice [3, 19, 20, 21, 22] and in theory [13] for MLC. Besides, our following analyses can be extended to other forms of hypothesis class, such as neural networks [23]. Let H be a reproducing kernel Hilbert space (RKHS) induced by the kernel function κ, where κ : X × X → R is a Positive
Deﬁnite Symmetric (PDS) kernel. Let Φ : X → H be a feature mapping associated with κ. The kernel-based hypothesis class can be deﬁned as follows. (cid:26) (cid:27)
F = x (cid:55)→ W(cid:62)Φ(x) : W = (w1, . . . , wc)(cid:62), (cid:107)W(cid:107) ≤ Λ
, (11) 6The original logistic loss can be easily changed to (cid:96)(z) = log2(1 + 2−z) to satisfy this condition. 4
where (cid:107)W(cid:107) denotes (cid:107)W(cid:107)H,2 = ((cid:80)c
Here we consider the following ﬁve learning algorithms with the corresponding aforementioned surrogate losses. They can be formulated as follows with λ denoting a trade-off hyper-parameter:
H)1/2 for convenience. j=1 (cid:107)wj(cid:107)2
Apa : min
W
Auk : min
W 1 n 1 n n (cid:88) i=1 n (cid:88) i=1
Lpa(f (xi), yi) + λ(cid:107)W(cid:107)2,
Luk (f (xi), yi) + λ(cid:107)W(cid:107)2, k = 1, 2, 3, 4. (12) (13) 4 Theoretical Analyses
In this section, we present generalization error bounds of the learning algorithms presented before and consistency analyses of the corresponding surrogate losses.
Consistency analyses aim to answer the question of whether the (0/1) expected risk of the learned function converges to the Bayes risk [11, 8] when samples goes to inﬁnity. It can provide valuable insights for learning from inﬁnite (or relatively large) data with an unconstrained hypothesis class.
In comparison, generalization bounds may offer more insights for learning from ﬁnite data with a constrained hypothesis class. It is possible to analyze the ﬁnite sample case in the perspective of consistency if a regret bound holds. However, we argue that it typically results in a looser bound w.r.t. c (i.e. O(c c)) compared to the generalization bound as detailed in Appendix A.
√ 4.1 Generalization Analyses
Technically, we mainly utilize the Rademacher complexity [24] and the vector-contraction in-equality [25], following the recent work [13]. Note that, advanced techniques [26], such as local
Rademacher complexity [27] can be utilized to get tighter bound w.r.t. n (i.e. O( 1 n )) by modifying the algorithm. But this is not our focus and we aim to analyze learning guarantees of these algorithms in the same framework and compare them fairly. Besides, we ﬁnd that their learning guarantees are much dependent on the distribution imbalance. Thus, we ﬁrst give the following deﬁnition.
Deﬁnition 1 (Instance-wise class balanced and extremely imbalanced distribution). For a distribution
P for MLC, it is said to be instance-wise class balanced if for any (x, y) sampled from P , |S+ y | =
|S− y | holds; it is said to be instance-wise class extremely imbalanced if for any (x, y) sampled from
P , |S+ y | = 1 or |S− y | = 1 holds.7
Then, we introduce the common mild assumptions for the subsequent analyses.
Assumption 1 (The common assumptions). (1) The hypothesis class is deﬁned in Eq.(11). (2) The training dataset S = {(xi, yi)}n it satisﬁes κ(x, x) ≤ r2 for all x ∈ X . i=1 is sampled i.i.d. from the distribution P , where ∃ r > 0, (3) The base (convex) loss (cid:96)(z) is ρ-Lipschitz continuous and bounded by B. 8
Then we provide the properties (including the Lipschitz constants) of surrogate losses (See Appendix
B.1). The Lipschitz constants of surrogates characterize the relationship between the Rademacher complexities [24] of the loss class and the hypothesis class based on the vector-contraction inequal-ity [25], which plays a central role in the generalization analysis. Next, we analyze the relationship between true and surrogate losses as follows, which to prove learning guarantees of algorithms.
Lemma 1 (The relationship between true and surrogate losses; full proof in Appendix B.2). For the
RL and its surrogate losses, the following inequalities hold for any f ∈ F and any sample (x, y): (f (x), y) ≤ Lpa(f (x), y) ≤ Lu3 (f (x), y) ≤ Lu4 (f (x), y) ≤ (c − 1)Lu2(f (x), y), (14) y |, |S− y |}Lu2(f (x), y) ≤ Lu3(f (x), y) ≤ max{|S+ y |, |S− y |}Lu2 (f (x), y). (15)
L0/1 r min{|S+ 7In this paper we call them balanced or extremely imbalanced distribution (or dataset) for short. 8Note that, the widely-used hinge and logistic loss are both 1-Lipschitz continuous. Although the exponential, and squared hinge losses are not globally Lipschitz continuous, they are locally Lipschitz continuous. 5
Besides, note that Lu2 cannot strictly upper bound L0/1 and Lpa, i.e., r (f (x), y) (cid:2) Lu2(f (x), y), Lpa(f (x), y) (cid:2) Lu2(f (x), y).
L0/1 r r (or Lpa) which depends on O(c). Besides, Lu3 and Lu4 strictly upper bound L0/1
From this lemma, we can observe that when an algorithm minimizes Lu2, it also optimizes an upper bound of L0/1 (or
Lpa). These upper bounds of L0/1 (or Lpa) would help to give learning guarantees of corresponding learning algorithms w.r.t. the (partial) ranking loss in the subsequent analyses. Furthermore, we can get the relationship between true and surrogate expected risks as follows. r r
Lemma 2 (The relationship between true and surrogate expected risks; full proof in Appendix B.3).
For any f ∈ F and any distribution P , the following inequalities hold:
Rpr
Rr 0/1(f ) ≤ Rr 0/1(f ) (cid:2) Ru2 (f ), Rpa(f ) (cid:2) Ru2(f ). 0/1(f ) ≤ Rpa(f ) ≤ Ru3(f ) ≤ Ru4(f ) ≤ (c − 1)Ru2 (f ), (16) (17)
Remark 1. From this lemma, we can see that, among the surrogate expected risks, the pairwise surrogate expected risk Rpa provides the tightest upper bound of the true expected risk for the same hypothesis. Thus, to study the learning guarantees of algorithms w.r.t. L0/1 pr ), we can ﬁrst analyze their counterparts w.r.t. Lpa. 9 (or L0/1 r
From above analyses, we ﬁnd the instance-wise class imbalance affects the Lipschitz constants of the surrogates and the relationship between these surrogates. Besides, it is hard to fully characterize the imbalance in real data. Thus, we consider two extremely cases w.r.t. the imbalance in the following. 4.1.1 The extremely imbalanced distribution (worst case)
In this section, we analyze the learning guarantees of these algorithms for the extremely imbalanced distribution. In this case, the Lipschitz constants (See Lemma B.1 in Appendix B.1) of the surrogates are largest. Therefore, these error bounds can be viewed as the worst cases and thus hold for all the distributions just like the classical probably approximately correct (PAC) bounds [14, 12, 15].
First, we analyze the learning guarantee of Au2 , as follows.
Theorem 1 (Learning guarantee of Au2 for extremely imbalanced distribution (worst case)). Assume the loss Lφ = (c − 1)Lu2, where Lu2 is deﬁned in Eq.(8). Besides, Assumption 1 holds and suppose
P is extremely imbalanced. Then, for any δ > 0, with probability at least 1 − δ over S, the following generalization bound holds for all f ∈ F:
Rr 0/1(f ) ≤ Rpa(f ) ≤ (c − 1)Ru2(f ) ≤ (c − 1) ˆRu2
S (f ) + 2
√ (cid:114) 2ρc
Λ2r2 n
+ 3Bc log 2
δ 2n
. (18) (cid:115) r
) which depends on O(c).
The full proof is in Appendix B.3.1. From this theorem, we can see that Au2 has a learning guarantee w.r.t. Lpa (or L0/1
Then, we provide the learning guarantee of Au3 in the following theorem.
Theorem 2 (Learning guarantee of Au3 for extremely imbalanced distribution (worst case)). Assume the loss Lφ = Lu3, where Lu3 is deﬁned in Eq.(9). Besides, Assumption 1 holds and suppose P is extremely imbalanced. Then, for any δ > 0, with probability at least 1 − δ over S, the following generalization bound holds for all f ∈ F:
Rr 0/1(f ) ≤ Rpa(f ) ≤ Ru3(f ) ≤ ˆRu3
S (f ) + 4 (cid:114)
√ 2ρ cΛ2r2 n
+ 6B log 2
δ 2n
. (19) (cid:115)
The full proof is in Appendix B.3.2. From this theorem, remarkably, we can see that Au3 has a learning guarantee w.r.t. Lpa (or L0/1 c), which enjoys the same order as
) which depends on O( the algorithm Apa [13]. Moreover, we ﬁnd that the learning guarantee of Au4 w.r.t. Lpa (or L0/1
) depends on O(c) (See Appendix B.3.3).
√ r r 9Note that, instead of directly bounding the 0/1 risk, we can treat our results as the upper bounds of the pairwise risk, allowing it greater than 1. 6
4.1.2 The balanced distribution (best case)
Here we analyze the learning guarantees of algorithms for balanced distributions. In this case, the
Lipschitz constants (See Lemma B.1 in Appendix B.1) of the surrogates are smallest. Thus, these error bounds can be viewed as the best case over all distributions, which is different from the classical
PAC bounds that hold for all distributions. First, we can ﬁnd that all algorithms with the univariate losses are exactly the same, which should share the same learning guarantee, and it is conﬁrmed by the following theorem.
Theorem 3 (Learning guarantee of Auk , k = 1, 2, 3, 4 for balanced distribution (best case); full proof in Appendix B.4.1). Assume the loss Lφ = 2Lu1 = c 2 Lu2 = Lu3 = Lu4, where they are deﬁned in
Section 3.1. Besides, Assumption 1 holds and suppose P is balanced. Then, for any δ > 0, with probability at least 1 − δ over S, the following generalization bound holds for all f ∈ F:
Rr 0/1(f ) ≤ Rpa(f ) ≤ Ru3 (f ) =
S (f ) = ˆRu3
S (f ) = c 2
ˆRu2 where 2 ˆRu1 c 2
Ru2 (f ) ≤ c 2
S (f ).
S (f ) = ˆRu4
ˆRu2
S (f ) + 4 (cid:114)
√ 2ρ
Λ2r2 n
+ 6B (cid:115) log 2
δ 2n
, (20)
From Theorem 3, we can observe that the model complexity term in this bound has no dependence on c. Notably, the same learning guarantee for these learning algorithms also conﬁrms the validity of our analyses and the tightness of these bounds. Moreover, Apa also has an error bound independent of c for balanced distribution (see Appendix B.4.2). 4.1.3 Comparison
For generalization analyses, a tighter upper bound usually suggests probably better performance [12]10.
In this paper, all algorithms are analyzed in the same framework and we also consider the extremely imbalanced case where the upper bounds of the Lipschitz constants in different surrogates are tight.
Given that the MLC distributions (or datasets) are usually highly imbalanced, it is relatively safe to evaluate the performance of the algorithms in theory by comparing their upper bounds.
We now compare the algorithms considering the cases with (approximately) imbalanced distributions.
• Apa vs Au2 . Apa usually has a tighter bound than Au2 . In particular, given the same
S than other univariate losses, making ˆRpa
S
S .11 Besides, for the model complexity terms (i.e. the last c) while Au2 depends on O(c). hypothesis space, it is usually easier to train ˆRpa smaller than others including ˆRu2 two terms), Apa has an error bound of O(
√
• Au3 vs Au2. Similarly, we argue that Au3 usually has a tighter bound than Au2 . For the
S .12 For the model
S is usually comparable or even larger than ˆRu3
√
ﬁrst risk term, (c − 1) ˆRu2 complexity term, Au3 has an error bound of O( c) while Au2 depends on O(c).
Overall, the tighter bound of Apa (and Au3 ) than Au2 indicates that Apa (and Au3 ) would probably perform better than Au2 , especially for a large label space (See Fig. 3 in Appendix E). Experimental results on imbalanced benchmark datasets in Table 3 conﬁrm our analyses.
In contrast, given balanced distributions, Au2 and Au3 share the same learning guarantee. Thus, in approximately balanced cases, Au2 perform probably similarly to Au3.
Note that our aforementioned formal generalization analyses are mainly for two extreme cases about the distribution imbalance. As for the in-between cases of the imbalance, it is indeed highly nontrivial to consider a continuous changing imbalance level of the distribution when instances may have different numbers of positive labels, and we leave it as an important future direction.
Nevertheless, our framework can be applied to the cases where each instance has the same number of positive labels, denoted as cp (See Appendix B.5 for details). Here we set cmin = min{cp, c − cp} for the clarity of following discussions. cmin directly reﬂects the imbalance level of the distribution. c 10When comparing bounds, it is usually more reasonable to compare the order of dependent variables rather than comparing the absolute values. 11Although we can not formally express the claim, we empirically observed it in experiments. 12In some cases, the ﬁrst risk term may be bigger than 1 but we can still take insights from the error bound through the dependent variables of the model complexity. 7
Note that the extremely imbalanced case (cp = 1 or cp = c − 1) and the balanced one (cp = c/2) are included. According to these results, we can observe that Apa has an error bound of O(
) cmin that is the same as Au3, while Au2 depends on O(
). Therefore, in an imbalanced case (not necessarily the extremely imbalanced ones), Apa and Au2 usually have better bounds than Au3 , which probably indicates their better performance over Au3 in practice. (cid:113) c c cmin
Besides, when c is in an extreme scale, such as millions or more, the O(c) computational time complexity for loss functions is prohibitive, and practitioners often resort to various negative sampling methods. While this is not the focus of this paper, our theoretical results indeed indicate that the univariate loss Lu3 would probably enjoy better performance than other univariate ones w.r.t. (partial) ranking loss, thus its estimator by use of negative sampling methods may be preferred in practice. 4.2 Consistency Analyses
Following [9, 8], we consider the general partial ranking loss as follows:
L0/1 gpr(f (x), y) = αy (cid:88) (p,q)∈S+ y ×S− y (cid:20)
[[fp(x) < fq(x)]] + 1 2
[[fp(x) = fq(x)]] (cid:21)
, (21) where αy is a positive penalty. Note that the losses in Eq. (2) is a special case of Eq. (21) with
αy = respectively. The general ranking loss can be deﬁned in a similar way as Eq. (21).
For clarity and generality, we deﬁne the general reweighted univariate surrogate loss as follows: 1 y ||S− y |
|S+
Lu(f (x), y) = c (cid:88) j=1 ([[yj = +1]]β+ y + [[yj = −1]]β− y )(cid:96)(yjfj(x)), (22) y and β− where β+ y > 0 for convenience in our analyses. Note that the penalties can be different and all univariate surrogate losses presented in Section 3.1 are special cases of Eq. (22). (See Table 2 for details.) y are penalties for the positive and negative labels respectively. We assume β+ y β−
Let BL(x, P (y|x)) denote the set of the Bayes predictors of a loss L given a sample x and a conditional distribution P (y|x). Remarkably, [8] provided a sufﬁcient and necessary condition for determining whether a surrogate loss to be (Fisher) consistent w.r.t. the (partial) ranking loss or not (See Lemma 3 in Appendix C). Checking the consistency of a new surrogate loss using Lemma 3 takes additional efforts, because one has to enumerate all conditional distributions. For the loss in
Eq. (22), we present more intuitive characterization that only involves the penalties in Theorem 4, considering various base losses (See Proposition 1 in Appendix C for the results of the Hinge loss):
Theorem 4 (Necessary condition for the consistency of Eq. (22) w.r.t. Eq. (21) with exponential, logistic or squared hinge loss). A general reweighted univariate surrogate loss in Eq. (22) with (cid:96)(z) = e−z, (cid:96)(z) = ln(1 + e−z) or (cid:96)(z) = (max{0, 1 − z})2 is consistent w.r.t. the general partial ranking loss in Eq. (21) only if ∃τ > 0, β+ 1≤j≤c yj ≤ c − 1. y for all y such that 1 − c ≤ (cid:80) y = τ α2 y β−
For clarity, see full proof in Appendix C. When c ≤ 3, the penalties of Lu1, Lu3 and Lu4 may coincide with that of Lu2 up to a multiplicative constant. When c ≥ 4, it is straightforward to construct counter examples that violate the necessary condition in Theorem 4 and obtain the Corollary 1 as follows.
Corollary 1 (Inconsistency of Lu1 , Lu3 and Lu4 w.r.t. Eq. (2) with exponential, logistic or squared hinge loss). If c ≥ 4, Lu1, Lu3 and Lu4 with (cid:96)(z) = e−z or (cid:96)(z) = ln(1 + e−z) or (cid:96)(z) = (max{0, 1 − z})2 are inconsistent w.r.t. the partial ranking loss in Eq. (2).
We further show the inconsistency of the general reweighted univariate loss in the general partial ranking
Eq. (22) w.r.t. loss in Eq. (21) with hinge loss. Note that this includes the inconsistency of Lu1 , Lu3 and Lu4 w.r.t. Eq. (2).
An immediate conclusion from Corollary 1 is that Lu1, Lu3 and Lu4 are inconsis-the RL in Eq. (1) because tent w.r.t. (x, P (y|x)) [8].
BL0/1 (x, P (y|x)) ⊂ BL0/1 pr r
Table 2: The penalties of the speciﬁc univariate losses w.r.t. the general reweighted form in Eq. (22).
Lu3
|S+
|S−
Lu4 y |, |S− y | min{|S+ y |, |S− y | min{|S+ y |} y |}
Loss 1/β+ y 1/β− y
Lu1 c c
Lu2 y ||S− y | y ||S− y |
|S+
|S+ 8
Compared to existing work [9, 8], although Theorem 4 is negative, it considers surrogate losses in a more general reweighted form, i.e. Eq. (22), which may be of independent interest. 5
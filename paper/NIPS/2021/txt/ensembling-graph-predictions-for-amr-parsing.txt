Abstract
In many machine learning tasks, models are trained to predict structure data such as graphs. For example, in natural language processing, it is very common to parse texts into dependency trees or abstract meaning representation (AMR) graphs. On the other hand, ensemble methods combine predictions from multiple models to create a new one that is more robust and accurate than individual predictions. In the literature, there are many ensembling techniques proposed for classification or regression problems, however, ensemble graph prediction has not been studied thoroughly. In this work, we formalize this problem as mining the largest graph that is the most supported by a collection of graph predictions. As the problem is
NP-Hard, we propose an efficient heuristic algorithm to approximate the optimal solution. To validate our approach, we carried out experiments in AMR parsing problems. The experimental results demonstrate that the proposed approach can combine the strength of state-of-the-art AMR parsers to create new predictions that are more accurate than any individual models in five standard benchmark datasets. 1

Introduction
Ensemble learning is a popular machine learning practice, in which predictions from multiple models are blended to create a new one that is usually more robust and accurate. Indeed, ensemble methods like XGBOOST are the winning solution in many machine learning and data science competitions
[Chen and Guestrin, 2016]. A key reason behind the successes of the ensemble methods is that they can combine the strength of different models to reduce the variance and bias in the final prediction
[Domingos, 2000, Valentini and Dietterich, 2004]. Research in ensemble methods mostly focuses on regression or classification problems [Dong et al., 2020]. Recently, in many machine learning tasks prediction outputs are provided in a form of graphs. For instance, in Abstract Meaning Representation (AMR) parsing [Banarescu et al., 2013], the input is a fragment of text and the output is a rooted, labeled, directed, acyclic graph (DAG). It abstracts away from syntactic representations, in the sense that sentences with similar meaning should have the same AMR. Figure 1 shows an AMR graph for the sentence You told me to wash the dog where nodes are concepts and edges are relations.
AMR parsing is an important problem in natural language processing (NLP) research and it has a broad application in downstream tasks such as question answering [Kapanipathi et al., 2020] and common sense reasoning [Lim et al., 2020]. Recent approaches for AMR parsing leverage the advances from pretrained language models [Bevilacqua et al., 2021] and numerous deep neural network architectures [Cai and Lam, 2020a, Zhou et al., 2021].
Unlike methods for ensembling numerical or categorical values for regression or classification problems where the mean value or majority votes are used respectively, the problem of graph ensemble is more complicated. For instance, Figure 2 show three graphs g1, g2, g3 with different 35th Conference on Neural Information Processing Systems (NeurIPS 2021).
structures, having varied number of edges and vertices with different labels. In this work, we formulate the ensemble graph prediction as a graph mining problem where we look for the largest common structure among the graph predictions. In general, finding the largest common subgraph is a well-known computationally intractable problem in graph theory. However, for AMR parsing problems where the AMR graphs have labels and a simple tree-alike structure, we propose an efficient heuristic algorithm (Graphene) to approximate the solution of the given problem well.
Figure 1: An example AMR graph for the sentence You told me to wash the dog.
To validate our approach, we collect the predictions from four state-of-the-art AMR parsers and create new predictions using the proposed graph ensemble algorithm. The chosen AMR parsers are the recent state-of-the-art AMR parsers including a seq2seq-based method using BART [Bevilacqua et al., 2021], a transition-based approach proposed in [Zhou et al., 2021] and a graph-based approach proposed in [Cai and Lam, 2020a]. In addition to those models, we also trained a new seq2seq model based on T5 [Raffel et al., 2020] to leverage the strength of this pretrained language model.
The experimental results show that in five standard benchmark datasets, our proposed ensemble approach outperforms the previous state-of-the-art models and achieves new state-of-the-art results in all datasets. For example, our approach achieves new state-of-the-art results with 1.7, 1.5, and 1.3 points better than prior arts in the BIO (under out-of-distribution evaluation), AMR 2.0, and AMR 3.0 datasets respectively. This result demonstrates the strength of our ensemble method in leveraging the model diversity to achieve better performance. An interesting property of our solution is that it is model-agnostic, therefore it can be used to make an ensemble of existing model predictions without the requirement to have an access to model training. Source code is open-sourced1.
Our paper is organized as follows: Section 2 discusses a formal problem definition and a study on the computational intractability of the formulated problem. The graph ensemble algorithm is described in Section 3. Experimental results are reported in Section 4 while Section 5 discusses related works.
The conclusion and future work are discussed in Section 6. 2 Problem formulation
Denote g = (E, V ) as a graph with the set of edges E and the set of vertices V . Each vertex v ∈ V and edge e ∈ E is associated with a label denoted as l(v) and l(e) respectively, where l(.) is a labelling function. Given two graphs g1 = (E1, V1) and g2 = (E2, V2), a vertex matching ϕ is a bijective function that maps a vertex v ∈ V1 to a vertex ϕ(v) ∈ V2.
Example 1. In Figure 2, between g1 and g2 there are many possible vertex matches, where
ϕ(g1, g2) = [1 → 3, 2 → 2, 3 → 1] is one of them (which can be read as the first vertex of g1 is mapped to the third vertex of g2 and so forth). Notice that not all vertices v ∈ V1 has a match in V2 and vice versa. Indeed, in this example, the fourth vertex in g2 does not have a matched vertex in g1.
Given two graphs g1, g2 and a vertex match ϕ(g1, g2), support of a vertex v with respect to the matching ϕ, denoted as sϕ(v), is equal to 1 if l(v) = l(ϕ(v)) and 0 otherwise. Given an edge e = (v1, v2) the support of e with respect to the vertex match ϕ, denoted as sϕ(e), is equal to 1 if l(e) = l((ϕ(v1), ϕ(v2))) and 0 otherwise. 1https://github.com/IBM/graph_ensemble_learning 2
Figure 2: A graph ensemble example. Each node and edge of g occurs in at least two out of three graphs g1, g2, g3. Therefore, g is θ-supported where θ = 2 by the given set of graphs. Graph g is also the graph with the largest sum of supports among all θ-supported graphs. The tables show the node and edge support (votes) are updated in each step of the Graphene algorithm when g1 is a pivot graph.
Example 2. In Figure 2, for the vertex match ϕ(g1, g2) = [1 → 3, 2 → 2, 3 → 1], the first vertex in g1 and the third vertex in g2 shares the same label A, therefore the support of the given vertex is equal to 1. On the other hand, the third vertex in g1 and the first vertex in g2 does not have the same label so their support is equal to 0.
Between two graphs, there are many possible vertex matches, the best vertex match is defined as the one that has the maximal total vertex support and edge support. In our discussion, when we mention a vertex match we always refer to the best vertex match.
Denote G = {g1 = (E1, V1), g2 = (E2, V2), · · · , gm = (Em, Vm)} as a set of m graphs. Given any graph g = (E, V ), for every gi denote ϕi(g, gi) as the best vertex match between g and gi. The total support of a vertex v ∈ V or an edge e ∈ E is defined as follows:
• support(e) = (cid:80)m
• support(v) = (cid:80)m i=1 sϕi(e) i=1 sϕi(v)
Given a support threshold θ, a graph g is called θ-supported by G if for any node v ∈ V or any edge e ∈ E, support(v) ≥ θ and support(e) ≥ θ.
Example 3. In Figure 2, graph g is θ-supported by G = {g1, g2, g3} where θ = 2.
Intuitively, an ensemble graph g should have as many common edges and vertices with all the graph predictions as possible. Therefore, we define the graph ensemble problem as follows:
Problem 1 (Graph ensemble). Given a support threshold θ and a collection of graphs G, find the graph g that is θ-supported by G and has the largest sum of vertex and edge supports.
Theorem 1. Finding the optimal θ-supported graph with the largest total of support is NP-Hard.
Proof. We prove the NP-Hardness by reduction to the Maximum Common Edge Subgraph (MCES) problem, which is known to be an NP-Complete problem [Bahiense et al., 2012]. Given two graphs g1 and g2, the MCES problem finds a graph g that is a common subgraph of g1 and g2 and the number of edges in g is the largest. Consider the following instance of the Graph Ensemble problem with
θ = 2, and G = {g1, g2} created from the graphs in the MCES problem. Assume that all vertices and all edges of g1 and g2 have the same label A. 3
Since θ = 2, a θ-supported graph is also a common subgraph between g1 and g2 and vice versa.
Denote gs and ge as the common subgraph between g1 and g2 with the largest support and the largest common edge, respectively. We can show that gs has as many edges as ge. In fact, since gs is the largest supported common subgraph there is no vertex v ∈ ge such that v ̸∈ gs because otherwise we can add v to gs to create a larger supported graph. For any edge e = (v1, v2) ∈ ge, since both vertices v1 and v2 also appear in gs, the edge e = (v1, v2) must also be part of gs otherwise we can add this edge to gs to create a subgraph with a larger support. Therefore, gs has as many edges as ge, which is also a solution to the MCES problem. 3 Graph ensemble algorithm
In this section, we discuss a heuristic algorithm based on the strategy “Please correct me if I am wrong!" to solve Problem 1. The main idea is to improve a pivot graph based on other graphs.
Specifically, starting with a pivot graph gi (i = 1, 2, · · · , m), we collect the votes from the other graphs for every existing vertex and existing/non-existing edges to correct gi. We call the proposed algorithm Graphene which stands for Graph Ensemble algorithm. The key steps of the algorithm are provided in the pseudo-code in Algorithm 1.
Algorithm 1: Graph ensemble with the Graphene algorithm.
Input: a set of graphs G = {g1, g2, · · · , gm} and the support threshold θ
Output: an ensemble graph ge
Algorithm: Graphene(G, θ) for i ← 1 to m do gpivot ← gi
V ← Initialise(gpivot) for j ← 1 to m do if j ̸= i then
V ← V ∪ getVote(ϕ(gpivot, gj)) end ge i ← F ilter(V, θ) end ge ← the graph with the largest support among ge
Return ge 1, · · · , ge m
For example, in Figure 2, the algorithm starts with the first graph g1 and considers it as a pivot graph gpivot. In the first step, it creates a table to keep voting statistics V initialized with the vote counts for every existing vertex and edge in gpivot. To draw additional votes from the other graphs, it performs the following subsequent steps:
• Call the function ϕ(g1, gi) (i = 2, 3, · · · , m) to get the best bijective mapping ϕ between the vertices of two graphs g1 and gi (with a little bit abuse of notation we drop the index i from ϕi when gi and gpivot are given in the context). For instance, the best vertex match between g1 and g2 is ϕ = 1 → 3, 2 → 2, 3 → 1 because that vertex match has the largest number of common labeled edges and vertices.
• Enumerate the matching vertices and edges to update the voting statistics accordingly. For instance, since the vertex 3 in g1 with label B is mapped to the vertex 1 in g2 with label C, a new candidate label C is added to the table for the given vertex. For the same reason, we add a new candidate label Z for the edge (1, 2). For all the other edges and vertices where the labels are matched the votes are updated accordingly.
Once the complete voting statistics V is available, the algorithm filters the candidate labels of edges and vertices using the provided support threshold θ by calling the function F ilter(V, θ) to obtain an ensemble graph ge i . For special cases, when disconnected graphs are not considered as a valid output, we keep all edges of the pivot graph even its support is below the threshold. On the other hand, for the graph prediction problem, where a graph is only considered a valid graph if it does not have multiple edges between two vertices and multiple labels for any vertex, we remove all candidate labels for vertices and edges except the one with the highest number of votes. 4
Assume that the resulting ensemble graph that is created by using gi as the pivot graph is denoted as ge i . The final ensemble graph ge is chosen among the set of graphs ge m as the one with the largest total support. Recall that ϕ(gpivot, gi) finds the best vertex match between two graphs.
In general, the given task is computationally intractable. However, for labeled graphs like AMR a heuristic was proposed [Cai and Knight, 2013] to approximate the best match by a hill-climbing algorithm. It first starts with the candidate with labels that are mostly matched. The initial match is modified iteratively to optimize the total number of matches with a predefined number of iterations (default value set to 5). This algorithm is very efficient and effective, it was used to calculate the Smatch score in [Cai and Knight, 2013] so we reuse the same implementation to approximate
ϕ(gpivot, gi) (report on average running time can be found in the supplementary materials). 2, · · · , ge 1, ge 4 Experiments
We compare our Graphene algorithm against four previous state-of-the-art models on different benchmark datasets. Below we describe our experimental settings. 4.1 Experimental settings 4.1.1 Model settings
SPRING The SPRING model, presented in [Bevilacqua et al., 2021], tackles Text-to-AMR and
AMR-to-Text as a symmetric transduction task. The authors show that with a pretrained encoder-decoder model, it is possible to obtain state-of-the-art performances in both tasks using a simple seq2seq framework by predicting linearized graphs. In our experiments, we used the pretrained models provided in [Bevilacqua et al., 2021]2. In addition, we trained 3 more models using different random seeds following the same setup described in [Bevilacqua et al., 2021]. Blink [Li et al., 2020] was used to add wiki tags to the predicted AMR graphs as a post-processing step.
T5 The T5 model, presented in [Raffel et al., 2020], introduces a unified framework that models a wide range of NLP tasks as a text-to-text problem. We follow the same idea proposed in [Xu et al., 2020] to train a model to transfer a text to a linearized AMR graph based on T5-Large. The data is preprocessed by linearization and removing wiki tags using the script provided in [amr]. In addition to the main task, we added a new task that takes as input a sentence and predicts the concatenation of word senses and arguments provided in the English Web Treebank dataset [goo]. The model is trained with 30 epochs. We use ADAM optimization with a learning rate of 1e-4 and a mini-batch size of 4.
Blink [Li et al., 2020] was used to add wiki tags to the predicted AMR graphs during post-processing.
APT [Zhou et al., 2021] proposed a transition-based AMR parser3 based on Transformer [Vaswani et al., 2017]. It combines hard-attentions over sentences with a target side action pointer mechanism to decouple source tokens from node representations. In our experiments, we use the setup described in [Zhou et al., 2021] and added 70K model-annotated silver sentences to the training data, which was created from the 85K sentence set in [Lee et al., 2020] with self-learning described in the paper.
Cai&Lam The model proposed in [Cai and Lam, 2020b] treats AMR parsing as a series of dual decisions (i.e., which parts of the sequence to abstract, and where in the graph to construct) on the input sequence and constructs the AMR graph incrementally. Following [Cai and Lam, 2020b], we use Stanford CoreNLP4 for tokenization, lemmatization, part-of-speech tagging, and named entity recognition. We apply the pretrained model provided by the authors5 to all testing datasets and follow the same pre-processing and post-processing steps for graph re-categorization.
Graphene (our algorithm) The only hyperparameter of the Graphene algorithm is the threshold θ.
Following the majority voting strategy [Dong et al., 2020], we set the threshold θ such that θ m ≥ 0.5 (where m is the number of models in the ensemble). In all experiments, we used a Tesla GPU V100 for model training and used 8 CPUs for making an ensemble. 2Available for download at https://github.com/SapienzaNLP/spring 3Available under https://github.com/IBM/ transition-amr-parser. 4Available at https://github.com/stanfordnlp/stanza/ 5The model “AMR2.0+BERT+GR” can be downloaded from https://github.com/jcyk/AMR-gs 5
4.1.2 Evaluation
We use the script6 provided in [Damonte et al., 2017] to calculate the Smatch score [Cai and Knight, 2013], the most relevant metric for measuring the similarity between the predictions and the gold
AMR graphs. The overall Smatch score can be broken down into different sub-metrics:
• Unlabeled (Unl.): Smatch score after removing all edge labels
• No WSD (NWSD): Smatch score while ignoring Propbank senses.
• NE: F-score on the named entity recognition (:name roles)
• Wikification (Wiki.): F-score on the wikification (:wiki roles)
• Negations (Neg.): F-score on the negation detection (:polarity roles)
• Concepts (Con.): F-score on the concept identification task
• Reentrancy (Reen.): Smatch computed on reentrant edges only
• SRL: Smatch computed on :ARG-i roles only 4.1.3 Datasets
Similarly to [Bevilacqua et al., 2021], we use five standard benchmark datasets [dat] to evaluate our approach. Table 1 shows the statistics of the datasets. AMR 2.0 and AMR 3.0 are divided into train, development and testing sets and we use them for in-distribution evaluation in Section 4.2.
Furthermore, the models trained on AMR 2.0 training data are used to evaluate out-of-distribution prediction on the BIO, the LP and the New3 dataset (See Section 4.3).
Table 1: Benchmark datasets. All instances of BIO, LP, and New3 are used to test models in out-of-distribution evaluation. For AMR 2.0 and 3.0, the models are trained on the training dataset, validated on the development dataset. We report results on testing sets in the in-distribution evaluation.
Datasets AMR 2.0 AMR 3.0 55,635 36,521
Training 1,722 1,368
Dev 1,898 1,371
Test
BIO Little Prince (LP) New3 n/a n/a 527 n/a n/a 1,562 n/a n/a 6,952 4.2
In-distribution evaluation
In the same spirit of [Bevilacqua et al., 2021], we evaluate the approaches when training and test data belong to the same domain. Table 2 shows the results of the models on the test split of the AMR 2.0 and AMR 3.0 datasets. The metrics reported for SPRING correspond to the model with the highest
Smatch score among the 4 models(the checkpoint plus the 3 models with different random seeds).
For the ensemble approach, we report the result when Graphene is an ensemble of four SPRING checkpoints, denoted as Graphene 4S. The ensemble of all the models including four SPRING checkpoints, APT, T5, and Cai&Lam is denoted as Graphene All. For the AMR 3.0 dataset, the
Cai&Lam model is not available so the reported result corresponds to an ensemble of all six models.
We can see that Graphene successfully leverages the strength of all the models and provides better prediction both in terms of the overall Smatch score and sub-metrics. In both datasets, we achieve the state-of-the-art results with performance gain of 1.6 and 1.2 Smatch points in AMR 2.0 and AMR 3.0 respectively. Table 2 shows that by combining predictions from four checkpoints of the SPRING model, Graphene 4S provides better results than any individual models. The result is improved further when increasing the number of ensemble models, indeed Graphene All improves Graphene 4S further and outperforms the individual models in terms of the overall Smatch score. 4.3 Out-of-distribution evaluation
In contrast to in-distribution evaluation, we use the models trained with AMR 2.0 data to collect
AMR predictions for the testing datasets in the domains that differ from the AMR 2.0 dataset. The purpose of the experiment is to evaluate the ensemble approach under out-of-distribution settings. 6https://github.com/mdtux89/amr-evaluation 6
Models
AMR 2.0
SPRING
APT
T5
Cai&Lam
Graphene 4S
Graphene All
AMR 3.0
SPRING
APT
T5
Graphene 4S
Graphene All
Table 2: Results on the test splits of the AMR 2.0 and AMR 3.0 dataset.
NWSD Con. NE
Neg. Wiki. Reen.
Smatch Unl. 84.22 82.70 82.98 80.15 84.78 85.85 83.25 80.57 82.17 83.77 84.41 87.38 86.18 86.17 83.60 87.96 88.68 86.40 83.96 85.22 86.89 87.35 84.72 83.23 83.43 80.66 85.29 86.35 83.71 81.07 82.66 84.23 84.83 89.98 89.48 89.85 87.39 90.64 91.23 89.38 88.38 89.03 90.09 90.51 90.77 90.20 90.65 82.25 92.19 92.30 87.80 86.82 86.99 88.27 88.64 72.65 67.27 73.43 78.09 75.22 77.01 72.94 68.69 72.59 74.60 74.76 82.76 78.87 77.99 85.36 83.88 84.63 81.22 76.88 73.78 81.92 82.25 74.30 73.19 72.44 66.46 71.42 74.49 73.33 70.78 72.18 70.22 71.93
SRL 82.89 82.01 82.02 77.35 83.46 84.41 81.97 80.17 81.18 82.46 83.15
Smatch Unl. 62.86 54.24 61.47 51.00 63.70 64.21
Neg. Wiki. Reen. 3.80 3.62 2.46 7.32 4.46 4.54 67.76 58.22 66.63 47.10 68.48 68.64 60.52 51.23 58.89 42.22 61.51 62.29 65.33 56.27 63.86 49.78 66.22 66.89 61.42 51.81 59.69 42.85 62.28 63.07 65.68 52.91 65.11 51.42 68.24 69.48 51.19 43.53 48.56 39.23 50.40 52.06 33.92 15.68 30.42 5.19 33.02 32.62
Table 3: Results of out-of-distribution evaluation on the BIO, New3, and Little Prince dataset.
Models
SRL
NWSD Con. NE
BIO
SPRING
APT
T5
Cai&Lam
Graphene 4S
Graphene All
New3
SPRING
APT
T5
Cai&Lam
Graphene 4S
Graphene All
Little Prince
SPRING
APT
T5
Cai&Lam
Graphene 4S
Graphene All 67.20 57.14 56.42 46.39 68.34 67.98 67.52 65.65 68.24 45.60 69.98 68.40 67.48 67.08 64.20 59.57 69.51 69.62 66.47 63.02 64.65 57.70 63.53 67.16 75.21 71.58 73.68 61.29 75.30 76.14 74.66 71.06 73.04 60.81 74.84 75.60 78.99 75.92 77.30 66.00 79.23 79.64 82.38 80.34 82.65 72.79 82.56 83.08 78.85 76.12 78.53 72.07 78.86 79.44 82.31 80.07 81.99 75.91 82.40 82.81 77.85 75.21 77.66 71.03 77.91 78.54 60.53 69.70 59.35 31.50 60.65 63.45 84.68 85.29 85.12 80.18 84.91 85.52 60.53 65.15 58.06 22.73 61.54 64.05 70.72 67.92 72.33 57.51 73.58 75.11 68.28 63.28 67.03 59.29 64.77 67.83 75.65 73.40 75.03 68.87 76.31 76.88 77.78 75.31 78.30 72.02 78.12 78.72
Table 3 shows the results of our experiments. Similar to the in-distribution experiments, the Graphene 4S algorithm achieves better results than other individual models, while the Graphene All approach improves the given results further. We achieve the new state-of-the-art results in these benchmark datasets (under out-of-distribution settings). This result has an important practical implication because in practice it is very common not to have labeled AMR data for domain-specific texts. After all, the labeling task is very time-demanding. Using the proposed ensemble methods we can achieve better results with domain-specific data not included in the training sets. 4.4 How the ensemble algorithm works
We explore a few examples to demonstrate the reason why the ensemble method works. Figure 3 shows a sentence with a gold AMR in Penman format and a list of AMRs corresponding to the prediction of SPRING [Bevilacqua et al., 2021], T5 [Raffel et al., 2020], APT [Zhou et al., 2021],
Cai and Lam [Cai and Lam, 2020b] parser and the ensemble graph given by Graphene. 7
Figure 3: The gold AMR and the ensemble AMR graph of SPRING, T5, APT and Cai&Lam using the Graphene algorithm for the sentence “They want money, not the face".
In this particular example, with the sentence “They want money, not the face", the AMR prediction from SPRING is inaccurate. Graphene corrects the prediction thanks to the votes given from the other models. In particular, the label and of the root node z0 of SPRING prediction was corrected to contrast − 01 because T5, APT and Cai&Lam parsers all vote for contrast − 01. On the other hand, the labels : op1 and : op2 of the edges (z0, z1) and (z0, z4) were modified to have the correct labels : ARG1 and : ARG2 accordingly thanks to the votes from the other models. We can also see that even though the Cai&Lam method misses polarity prediction, since the other models predict polarity correctly, the ensemble prediction does not inherit this mistake. Putting everything together, the prediction from Graphene perfectly matches with the gold AMR graph in this example.
Table 4: The average total support and Smatch score of SPRING, Graphene with SPRING as a pivot and Graphene respectively. The support is highly correlated with Smatch score.
AMR 3.0
Sup. 136.90 139.42 142.07
AMR 2.0
Sup. 170.15 172.70 175.73
SPRING
SPR. pivot
Graphene
Sup. 118.27 120.85 123.62
Sup. 166.86 169.97 179.38
Smat. 84.08 84.70 85.85
Smat. 83.14 83.73 84.43
Smat. 74.66 74.83 75.60
Smat. 60.52 61.56 62.29
Smat. 77.85 78.22 78.54
Sup. 69.33 70.97 72.64
New3
BIO
LP
The Graphene algorithm searches for the graph that has the largest support from all individual graphs.
One question that arises from this is whether the support is correlated with the accuracy of AMR parsing. Table 4 shows the support and the Smatch score of three models in the standard benchmark datasets. The first model is SPRING, while the second one denoted as SPR. pivot uses SPRING prediction as a pivot. The last model corresponds to the Graphene algorithm. Since Graphene looks for the best pivot to have better-supported ensemble graphs, the total supports of the Graphene predictions are larger than the SPR. pivot predictions. From the table, we can also see that the total support is highly correlated to the Smatch score. Namely, Graphene has higher support in all the benchmark datasets and a higher Smatch score than SPR. pivot. This experiment suggests that by optimizing the total support we can obtain the ensemble graphs with higher Smatch score. 5
Imperative programming is widely used in deep learning frameworks to implement deep neural networks (DNNs). However, existing systems that combine imperative programming with symbolic graph execution face limitations in fully supporting the usability of imperative programming. These systems fail to execute imperative DL programs that contain Python features without corresponding symbolic representation. In order to address this limitation, we propose Terra, an imperative-symbolic co-execution system that can handle any imperative DL programs while achieving optimized performance. Terra achieves this by decoupling DL operations from Python features and building a symbolic graph. It then conducts imperative execution to support all Python features while delegating decoupled operations to symbolic execution. We evaluated Terra's performance improvement and coverage using ten imperative DL programs for various DNN architectures. The results demonstrate that Terra can accelerate the execution of all ten imperative DL programs, while a state-of-the-art system called AutoGraph fails to execute five of them.
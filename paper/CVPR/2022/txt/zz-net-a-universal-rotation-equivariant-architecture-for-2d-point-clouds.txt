Abstract
In this paper, we are concerned with rotation equivari-ance on 2D point cloud data. We describe a particular set of functions able to approximate any continuous rotation equivariant and permutation invariant function. Based on this result, we propose a novel neural network architecture for processing 2D point clouds and we prove its universality for approximating functions exhibiting these symmetries.
We also show how to extend the architecture to accept a set of 2D-2D correspondences as indata, while maintaining similar equivariance properties. Experiments are presented on the estimation of essential matrices in stereo vision. 1.

Introduction
The need to interpret and process point clouds arises in many different application areas such as autonomous driv-ing, augmented reality and robotics [18]. Basic problem ex-amples in computer vision are classification, segmentation and object detection as well as correspondence problems in multiple view geometry [34] . Considering as input object a point cloud or a pair of point clouds, it is a natural require-ment that permuting the order of the points doesn’t change the object in question. Such a permutation should there-fore not change the way the points are processed. This per-mutation symmetry needs to be considered when designing a neural network for point cloud input, which is typically done by having equivariant network layers. Another possi-ble symmetry is rotation of the point clouds about the origin.
For an example of a single point cloud processing task that is rotation equivariant, see Figure 1. We will also consider rotational symmetries for pairs of point clouds.
Equivariance. Let us introduce some notation and pro-vide a formal definition of equivariance. Given a group G we consider sets which exhibit G-symmetries (in a sense to be made precise shortly) and functions between such sets.
A G-set is a set X equipped with a G-action, i.e., a group homomorphism φ from G to the group of bijections from
Figure 1. A simple example of rotation equivariance. The illus-tration shows the task of determining the direction to the North
Star given other stars in the night sky. The input is the set of lo-cations of the visible stars in some 2D coordinate frame. Rotation equivariance of the point cloud processor f means here that the de-termined direction should rotate if the night sky (or the observer) rotates. (Picture of stars [2].)
X to X. One should think of a G-action φ as a way to re-late elements of G to symmetries of X. Typically, we will suppress the group homomorphism in the notation and write gx or g∗x for φ(g)(x). An example of a G-set is Cm acted on by the permutation group Sm. Note that Sm could act on Cm in different ways and we must specify the action to describe a G-set. The canonical action is to permute the m dimensions, but another obvious action is the trivial ac-tion given by πZ = Z for all π ∈ Sm and all Z ∈ Cm.
If we have two G-sets X and Y , we say that a function f : X → Y is (G-)equivariant if it commutes with the G-actions: f (gx) = gf (x). A special case is when the action on Y is trivial and then we call f invariant: f (gx) = f (x).
For more information on groups, symmetries and equivari-ance in general, we refer to e.g. [22].
In this paper, we focus on the group SO(2) × Sm. The
SO(2)-action on a point cloud is given by rotating all points about the origin and the Sm-action is given by permuting the points.1 More concretely, we are concerned with func-tions that are invariant to permutations, but equivariant to 1Technical note: These two actions commute with each other and hence define an SO(2) × Sm-action.
rotations. Let us call the set of such functions R(m).
Additionally, we go further, and describe new results and neural network architectures for the case of clouds of pair of points, or correspondences. In this case, we deal with func-tions that are permutation invariant, rotation equivariant to one of the clouds, and rotation invariant with respect to the other. We call this set of functions R2(m).
An obvious limitation with our work is that we only deal with SO(2)-equivariance and not higher order rotations.
Still, it is an important case with many different applica-tions. For instance, in many scenarios, invariance with re-spect to rotation around one axis is the correct model. An-other example is essential matrix estimation [16], which we will explore in Section 5.2. Note that the derivations are simplified and the computations can be made more efficient as the group of 2D rotations is commutative, which is not the case for SO(d) with d > 2.
The main contributions of this paper are as follows. First, we describe a dense set of equivariant functions on 2D point clouds (Theorem 2). With that set as a basis, we describe a neural network architecture for approximating the function space R(m) and prove its universality (Theorem 3). We then present how to extend that architecture to also cover
R2(m) and discuss the extension’s universality properties.
We test our architecture on a (toy) rotation estimation prob-lem and the estimation of essential matrices in stereo vision. 1.1.
The reconstruction of 3D scene structure plays a crucial role in various computer vision tasks. Depth, which provides information about the 3D geometry, is commonly obtained through stereo matching techniques. With the advancement of convolutional neural networks (CNNs), deep stereo methods have shown significant progress in driving scenes, constantly improving benchmark performance. However, deep stereo models often struggle when applied to unseen scenarios due to the domain gap between training and testing data domains.Domain-adaptive methods have been proposed to overcome this performance degradation, but they rely heavily on the availability of scene-specific training data, which can be expensive and impractical to collect for all possible scenarios. In real-world driving scenarios, such as changing weather and road conditions, a stereo model with a fixed architecture cannot perform well across all types of scenes. Furthermore, it is challenging to learn new scenes without forgetting previous knowledge.To address these challenges, we propose a Reusable Architecture Growth (RAG) framework for continual stereo matching. RAG mitigates catastrophic forgetting by freezing the model parameters learned in previous scenes and assigns task-specific neural units for each new scene during architecture growth. By reusing learned neural units, the framework achieves a balance between model performance and parameter efficiency. Additionally, we introduce a Scene Router module to automatically select the scene-specific architecture path at inference time, enabling rapid adaptation to scene switches and improving computational efficiency.Experiments conducted on various datasets demonstrate that our method achieves compelling performance under different challenging weather and road conditions. When compared to state-of-the-art methods, our approach shows comparable or better results. Our contributions include the development of the RAG framework, which combines task-specific neural units search and architecture growth, and the introduction of the Scene Router module for adaptive architecture selection.
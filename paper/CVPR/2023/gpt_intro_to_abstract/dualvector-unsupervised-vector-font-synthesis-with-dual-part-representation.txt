Fonts play a crucial role in content display and distribution, but designing high-quality vector fonts is a time-consuming task. Recent advancements in machine learning have enabled font generation, but generating high-quality vector fonts automatically remains a practical challenge. Existing font synthesis methods generate pixelated glyph images, which suffer from aliasing artifacts on edges, limiting their use for high-quality rendering or printing at different resolutions. Some methods adopt neural networks to model glyphs as contiguous neural fields, but preserving details in high-frequency regions and dealing with computational costs are difficult. Other approaches directly synthesize vector fonts but struggle with effective representation in deep learning frameworks and the need for ground-truth drawing commands. To address these challenges, we propose a dual-part vector font representation, where each glyph shape is the union of a fixed number of dual parts formed by subtracting a "positive" and a "negative" geometric primitive. We use closed Bézier paths as the geometric primitives due to their representational ability and compatibility with digital font formats. This representation allows for predicting multiple basic primitives instead of complex drawing command sequences, making manifold learning and latent space interpolation more feasible.Based on this dual-part representation, we introduce DualVector, a method for learning high-quality font modeling and synthesis from glyph images without vector supervision. We optimize the parameters of Bézier curves using differentiable rendering techniques for vector graphics. To overcome the local minima problem, we supervise the occupancy value derived from the Bézier curves' analytical expression and initialize the process using an unsigned distance field. We also train a glyph image generation model and utilize differentiable rendering for contour refinement to align the vector shape with the image contour, thereby enhancing local detail fidelity. We evaluate DualVector against state-of-the-art methods and demonstrate its superior quality in font modeling and generation. The outputs of our approach can be easily converted to common digital font formats. Our contributions include a new dual-part font representation, a method for dual-part and pixelated representation modeling, and a contour refinement step and UDF initialization strategy to improve the quality and convergence of vector font generation.
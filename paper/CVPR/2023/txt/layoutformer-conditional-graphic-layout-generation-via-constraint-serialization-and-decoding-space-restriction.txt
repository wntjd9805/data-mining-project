Abstract
Conditional graphic layout generation, which generates realistic layouts according to user constraints, is a chal-lenging task that has not been well-studied yet. First, there is limited discussion about how to handle diverse user con-straints flexibly and uniformly. Second, to make the lay-outs conform to user constraints, existing work often sac-In this work, we rifices generation quality significantly. propose LayoutFormer++ to tackle the above problems.
First, to flexibly handle diverse constraints, we propose a constraint serialization scheme, which represents different user constraints as sequences of tokens with a predefined format. Then, we formulate conditional layout generation as a sequence-to-sequence transformation, and leverage encoder-decoder framework with Transformer as the ba-sic architecture. Furthermore, to make the layout better meet user requirements without harming quality, we pro-pose a decoding space restriction strategy. Specifically, we prune the predicted distribution by ignoring the options that definitely violate user constraints and likely result in low-quality layouts, and make the model samples from the re-stricted distribution. Experiments demonstrate that Lay-outFormer++ outperforms existing approaches on all the tasks in terms of both better generation quality and less con-straint violation. 1.

Introduction
Graphic designs greatly facilitate information communi-cation in our daily life. During its creation, the layout, i.e., positions and sizes of elements, plays a critical role. To assist layout design, conditional layout generation, which takes user constraints as input and generates layouts as out-*Work done during an internship at Microsoft Research Asia.
Figure 1. Comparing with previous conditional layout generation approaches, LayoutFormer++ performs better on sufficient flexi-bility and good controllability. put, attracts great attention (see Figure 1).
It is different from unconditional layout generation, which generates lay-outs freely without constraints, from at least two aspects.
First, the model should be able to handle diverse user con-straints, called sufficient flexibility. Figure 2 shows 6 typical tasks of layout generation in real-world applications includ-ing layout completion, layout refinement, layout generation conditioned on element types, element types with sizes, el-ement relationships, or any of their combinations. Second, the model should generate layouts conforming to user re-quirements (i.e., constraints) as many as possible without harming quality, called good controllability (see Figure 1).
However, existing work cannot meet the above two re-quirements. First, there is no existing work can support all the layout generation tasks with different user constraints.
Most existing approaches simply focus on tackling a sin-gle conditional layout generation task without considering whether they can be applied to other tasks. For example,
LayoutTransformer [3] can only perform completion task and BLT [10] cannot handle element relationships. Such task-specific approaches hinder the development of solu-tions for the new task. Second, there are no satisfactory methods to ensure good controllability. Some approaches directly replace the values in the predicted layout with the ones specified in the user constraints [3, 10]. Another work defines a set of heuristic rules and leverages latent opti-mization [8]. To make the generated layouts meet user re-quirements, they often degrade the generation quality sig-nificantly.
In this work, we propose a unified model called Layout-Former++ to support the different scenarios of conditional layout generation. In LayoutFormer++, a set of constraints is represented as a sequence. Specifically, we use a con-straint serialization scheme to serialize different user con-straints into a sequence of tokens with a predefined format (see Figure 1). The intuition behind this design choice is as follows. First, the sequence format is widely used and ef-fective. Its effectiveness in layout generation has also been demonstrated in recent works [3, 10]. Second, a sequence is very flexible to accommodate different constraints for lay-out generation. We can serialize any structured information in the user constraints as a sequence. We found although user needs are diverse, they are all about element types and five attributes including type, top coordinate, left coordi-nate, width and height. Thus, we can simply define a set of vocabularies to describe the attributes respectively and con-catenate descriptions of different attributes and elements to construct a sequence.
Therefore, the conditional layout generation problem can be formulated as a sequence-to-sequence transformation problem. This enables us to leverage a simple yet effec-tive encoder-decoder framework with Transformer [26] as a basic model architecture. The encoder processes the user constraints in a bidirectional way. The decoder predicts the layout sequence autoregressively, where there are multiple decoding steps and the model samples one token from the predicted distribution at each decoding step.
Furthermore, to achieve good controllability, we intro-duce a decoding space restriction strategy in the inference stage. Our key idea is to prune the infeasible options in the predicted distribution and make the model sample from the restricted distribution at each decoding step. Specifically, we leverage two kinds of information to prune the options.
First, the options that definitely violate the user constraints are pruned. For example, if a user wants one image and two buttons, the option for putting one text box will not be acceptable. Second, the options with low probabilities in the predicted distribution, which will very likely result in low-quality layouts, are also pruned. As the feasible op-tion set may be empty after pruning, we further introduce a backtracking mechanism, in which the model goes back
Figure 2. Typical tasks for conditional layout generation. to a certain decoding step and find a better solution. Note that the whole generation process of the proposed strategy still relies on the distribution learned from the training data.
Thus, it is less likely to disturb a layout when making it better conform to user constraints.
We conduct extensive experiments on two public datasets [15, 30] and six layout generation tasks with dif-ferent user constraints, to evaluate LayoutFormer++ and compare it with state-of-the-art approaches. Experimental results show that LayoutFormer++ can successfully tackle all six layout generation tasks that are handled separately by previous work, demonstrating that it is able to provide sufficient flexibility. Furthermore, LayoutFormer++ signif-icantly outperforms previous approaches in terms of both better generation quality and less constraint violation, indi-cating that it achieves good controllability. 2.
Abstract 1.

Introduction
Deep learning has had remarkable success in robotic perception, but its data-centric nature suffers when it comes to generalizing to ever-changing environments. By contrast, physics-based optimization generalizes better, but it does not perform as well in complicated tasks due to the lack of high-level semantic information and reliance on manual parametric tuning. To take advantage of these two comple-mentary worlds, we present PyPose: a robotics-oriented,
PyTorch-based library that combines deep perceptual mod-els with physics-based optimization. PyPose’s architecture is tidy and well-organized, it has an imperative style interface and is efficient and user-friendly, making it easy to integrate into real-world robotic applications. Besides, it supports par-allel computing of any order gradients of Lie groups and Lie algebras and 2nd-order optimizers, such as trust region meth-ods. Experiments show that PyPose achieves more than 10× speedup in computation compared to the state-of-the-art libraries. To boost future research, we provide concrete ex-amples for several fields of robot learning, including SLAM, planning, control, and inertial navigation. (cid:0)Corresponding Author. chenwang@dr.com 1Carnegie Mellon University, Pittsburgh, PA 15213, USA. 2State University of New York at Buffalo, NY 14260, USA. 3Massachusetts Institute of Technology, Cambridge, MA 02139, USA. 4Nanyang Technological University, Singapore 639798. 5ETH Zürich, 8092 Zürich, Switzerland. 6Pennsylvania State University, University Park, PA 16801, USA. 7Delhi Technological University, Delhi, India. 8University of Virginia, Charlottesville, VA 22904, USA. 9The Chinese University of Hong Kong, Shenzhen, China. 10University of Massachusetts Amherst, MA 01003, USA. 11Georgia Institute of Technology, Atlanta, GA 30332, USA 12Wuhan University, Hubei 430072, China. 13University of Michigan, Ann Arbor, MI 48109, USA. 14Fox Chapel Area High School, Pittsburgh, PA 15238, USA. 15Lexington High School, Lexington, MA 02421, USA. 16Stanford University, Stanford, CA 94305, USA.
Deep learning has made great inroads in visual perception tasks such as classification [66], segmentation [45], and de-tection [38]. However, it is still often unsatisfactory in some robotic applications due to the lack of training data [65], ever-changing environments [76], and limited computational resources [67]. On the other hand, physics-based optimiza-tion has shown great generalization ability and high accu-racy in many vision and robotic tasks, such as control [24], planning [70], and simultaneous localization and mapping (SLAM) [76]. Nevertheless, it relies on problem-specific parameter tuning and suffers from the lack of semantic in-formation. Since both methods have shown their own merits, more and more efforts have been made to take advantage of the two complementary worlds [75].
Currently, learning-based methods and physics-based op-timization are typically used separately in different modules of a robotic system [23]. For example, in semantic SLAM, learning-based methods showed promising results in scenar-ios where high-level semantic information is needed or as a replacement for hand-crafted features and descriptors, e.g., feature matching in the front-end [53], while physics-based optimization plays a vital role in cases where a well-defined physical model can be established, e.g., pose graph optimiza-tion in the back-end [12]. Researchers usually first execute the front end and then pass the results to the back end for optimization. Despite the tremendous progress in the past decades, such a two-stage, decoupled paradigm may only achieve sub-optimal solutions, which in turn limits system performance and generalization ability. Hence, developing integrated methods with end-to-end differentiation through optimization is an emerging trend [59–61].
A variety of applications in perception, motion planning, and automatic control have been explored for end-to-end learning [30,37,59]. However, most of these applications rely
on problem-specific implementations that are often coded from scratch, which makes it difficult for researchers to build upon prior work and explore new ideas. This hinders the development cycle due to the lack of a unified and system-atic development framework. For example, people usually leverage PyTorch-based [48] models for developing learning-based perceptual models, but then have to use C(++)-based optimization libraries, such as GTSAM [20], OMPL [54], and CT [27], for physics-based optimization. The mixed usage of Python and C++ libraries increases the system complexity and slows down the development cycle as it is time-consuming for cross-language debugging and ineffi-cient to transfer data among different processes, e.g., ROS nodes [51]. Therefore, there is an urgent need for a sys-tematic development tool in a single language, accelerating end-to-end learning for physics-based optimization.
Some researchers have spent effort towards this objec-tive. For example, LieTorch exploits the group structure of 3D transformations and performs back-propagation in the tangent spaces of manifolds [60]. However, only 1st-order differentiable operations are currently implemented, which limits its practical use, since higher order derivatives provide additional local information about the data distribution and enable new applications [44]. CvxpyLayer [3] takes con-vex optimization as a differentiable neural network layer, while it doesn’t support operation for Lie groups and 2nd-order optimizers. Similarly, Theseus [49] takes non-linear optimization as network layers; however, it adopts rotation matrices for transformation representation, which is memory inefficient for practical robotic applications.
To address the above limitations, we present PyPose, an open-source library based on PyTorch to connect learning-based perceptual models with classical algorithms that can be formulated as physics-based optimization, e.g., geometry problem, factor-graph optimization, and optimal control. In summary, our main contributions are:
• We present a new python-based open-source library, Py-Pose, to further enable end-to-end learning with physics-based optimization and accelerate the next generation of developments in robotics. PyPose is designed to be easily interpretable, user-friendly, and efficient with a tidy and well-organized architecture. It provides an im-perative programming style for the convenience of real-world robotic applications. PyPose supports any order gradient computation of Lie groups and Lie algebras, and 2nd-order optimizers such as Levenberg-Marquardt with trust region steps. As demonstrated in Figure 1, our experiments show that PyPose achieves more than 10× faster compared to state-of-the-art libraries.
• We provide sample uses of PyPose. Users can easily build upon existing functionalities for various robotic applications. To the best of our knowledge, PyPose is one of the first Python libraries to comprehensively cover several sub-fields of robotics, such as perception,
SLAM, and control, where optimization is involved. 2.
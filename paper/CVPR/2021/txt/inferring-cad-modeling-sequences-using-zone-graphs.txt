Abstract
In computer-aided design (CAD), the ability to “reverse engineer” the modeling steps used to create 3D shapes is a long-sought-after goal. This process can be decomposed into two sub-problems: converting an input mesh or point cloud into a boundary representation (or B-rep), and then inferring modeling operations which construct this B-rep.
In this paper, we present a new system for solving the sec-ond sub-problem. Central to our approach is a new geo-metric representation: the zone graph. Zones are the set of solid regions formed by extending all B-Rep faces and partitioning space with them; a zone graph has these zones as its nodes, with edges denoting geometric adjacencies be-tween them. Zone graphs allow us to tractably work with industry-standard CAD operations, unlike prior work using
CSG with parametric primitives. We focus on CAD pro-grams consisting of sketch + extrude + Boolean operations, which are common in CAD practice. We phrase our prob-lem as search in the space of such extrusions permitted by the zone graph, and we train a graph neural network to score potential extrusions in order to accelerate the search.
We show that our approach outperforms an existing CSG inference baseline in terms of geometric reconstruction ac-curacy and reconstruction time, while also creating more plausible modeling sequences. 1.

Introduction
Many real-world 3D objects begin their existence as parametric CAD programs. If one could recover such pro-grams for everyday objects, it would enable powerful edit-ing and re-purposing abilities, with many applications in mechanical and industrial design. As such, it’s unsurpris-ing that this problem has become a popular research topic in the graphics, vision, and machine learning communities, with multiple recent papers examining how to infer CAD-like programs for an input shape [22, 7, 30, 8, 16].
This work was done partially during Xianghao Xu and Wenzhe Peng’s internship at Autodesk Research
Figure 1: A solid shape (top-left) can be decomposed into a graph of zones which make up its interior volume and sur-rounding space (top-right). This representation permits ef-ﬁcient search for modeling sequences that reconstruct the shape, using industry standard modeling operations (bot-tom). Light red lines in the zone graph indicate connections between zone nodes.
In the bottom modeling sequence, green denotes sketch + extrude + union and red denotes sketch + extrude + difference.
One property shared by these works is their use of con-structive solid geometry (CSG) as a modeling language. In
CSG, shapes are formed by combining primitive solids (e.g. spheres, cylinders, boxes) with Boolean union, intersection,
Its small library of parametric primitive and difference. shapes makes it appealing for CAD program inference, as this reduces the search space of possible programs.
Unfortunately, parametric primitive CSG is not the mod-eling language used by CAD practitioners today. Instead, modern CAD workﬂows use feature-based modeling, in which a solid object is created by iteratively adding fea-tures such as holes, slots, or bosses [13]. Feature creation is typically performed via operations on surfaces, as these are intuitive for users to reason about: for instance, creating a slot in the surface of an object by sketching the proﬁle of the 6062
slot and then specifying how deep it goes. Throughout this process, the object’s geometry is stored as a boundary rep-resentation, or B-rep, which is a watertight assembly of sur-face patches which enclose the object’s solid volume [27].
Feature-based modeling with B-reps supports Boolean op-erations between solids, making it strictly more expressive than parametric primitive CSG. This expressiveness comes at a cost for program inference, though, as the space of feature-based modeling programs is much larger.
How can we enable tractable inference of feature-based
CAD programs? We ﬁrst note another common property of prior work: solving CAD program inference “in one shot,” going directly from input unstructured geometry to a CAD program. However, this problem actually decom-poses into two sub-problems: (1) convert the input geom-etry into a B-rep, (2) infer a CAD program which gener-ates that B-rep. The ﬁrst sub-problem is of huge impor-tance to the CAD industry, where it is known as reverse engineering. Many semi-automatic commercial tools ex-ist [15, 14] and recent work has begun to leverage learn-ing based approaches [23, 26]. The second problem is sup-ported by all major CAD software using a rule-based ap-proach, e.g. [1, 24]. However, such systems often require active input from a human designer, can fail to automati-cally infer earlier steps of longer modeling sequences, and struggle to generalize beyond pre-deﬁned rules.
In this paper, we show that assuming a B-rep as input allows us to tractably attack the problem of automatically inferring industry-standard, feature-based CAD programs.
Speciﬁcally, it allows us to use a new geometry represen-tation that enables tractable program search. Extending all surface faces of the input B-rep into inﬁnite surfaces and then partitioning space with those surfaces results in an ar-rangement of solid zones. The spatial connectivity of these zones forms a data structure which we call the zone graph (Figure 1, top-right). Searching for a CAD program that reconstructs the input shape then becomes a search for a sequence of modeling operations that ﬁll in all the zones which are inside the input B-rep (Figure 1, bottom). This perspective reduces the search space of possible programs from an inﬁnite set (a space of programs with many con-tinuous parameters) to a ﬁnite set (the set of operation se-quences that ﬁll particular zones).
In this paper, we focus on modeling via sketch + ex-trude + Boolean operations, which are commonly-used in
CAD workﬂows to create new solid masses and cut holes and slots out of existing ones. In addition, we learn how to guide the search using a large dataset of CAD model-ing sequences. We train a graph neural network that takes the zone graph as input and predicts scores for different candidate modeling operations, allowing search to focus on higher-scoring options ﬁrst. This allows our approach to in-fer modeling sequences which use meaningful design pat-terns without active guidance from a human designer.
In experiments on real-world CAD shapes, our zone graph method outperforms a recent state-of-the-art CSG inference method: it achieves better reconstruction accu-racy by inferring more plausible programs that use industry-standard CAD operations.
In summary, the contributions of this paper are:
• The zone graph representation of B-rep solids, which reduces CAD program search space to a ﬁnite size.
• A search algorithm for inferring CAD modeling se-quences from zone graphs.
• A graph neural network for learning to score candidate
CAD operations during program search. 2.
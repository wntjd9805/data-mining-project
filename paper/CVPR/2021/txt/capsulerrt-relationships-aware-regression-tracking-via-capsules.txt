Abstract
Regression tracking has gained more and more attention thanks to its easy-to-implement characteristics, while exist-ing regression trackers rarely consider the relationships be-tween the object parts and the complete object. This would ultimately result in drift from the target object when missing some parts of the target object. Recently, Capsule Network (CapsNet) has shown promising results for image classiﬁca-tion beneﬁts from its part-object relationships mechanism, while CapsNet is known for its high computational demand even when carrying out simple tasks. Therefore, a primitive adaptation of CapsNet to regression tracking does not make sense, since this will seriously affect speed of a tracker. To solve these problems, we ﬁrst explore the spatial-temporal relationships endowed by the CapsNet for regression track-ing. The entire regression framework, dubbed CapsuleRRT, consists of three parts. One is S-Caps, which captures the spatial relationships between the parts and the object.
Meanwhile, a T-Caps module is designed to exploit the tem-poral relationships within the target. The response of the target is obtained by STCaps Learning. Further, a prior-guided capsule routing algorithm is proposed to generate more accurate capsule assignments for subsequent frames.
Apart from this, the heavy computation burden in CapsNet is addressed with a knowledge distillation pose matrix com-pression strategy that exploits more tight and discriminative representation with few samples. Extensive experimental results show that CapsuleRRT performs favorably against state-of-the-art methods in terms of accuracy and speed. 1.

Introduction
Regression tracking can be broadly divided into two categories: discriminative correlation ﬁlters (DCFs) based trackers [22, 42, 8] and deep regression networks (DRNs) based trackers [7, 2, 9, 33, 27]. DCFs trackers exploit the property of the circulant matrix and optimize the correla-tion ﬁlters with a system of linear functions. Not only that,
DCFs trackers achieve fast speed by taking advantage of the correlation computed through the Fourier domain, but
Figure 1: Visual comparisons of the response map in ex-isting deep regression networks on the Human2 sequence.
As our CapsuleRRT takes the relationships of part-object into account, a relatively correct response can be obtained even in the case of heavy occlusion. also perform favorably on several popular tracking bench-marks [41, 24, 11]. Unfortunately, the main drawback of
DCFs trackers is that the DCFs trackers take few advan-tages of end-to-end learning. On the contrary, DRNs track-ers [7, 2, 9, 33, 27] have paid more attention due to it has the potential to take full advantage of end-to-end learning.
Most DRNs trackers share a similar mechanism: learn a mapping from a sampling area of the target objects to soft labels derived from a Gaussian function. Nevertheless, such a mechanism does not take into account the relationships between the object parts and the complete object, thus giv-ing rise to drift. As shown in Figure 1, low response values are assigned to some parts of the object, thus resulting in drift. Further, some DRNs trackers update with such noisy samples, which will result in tracking failure.
Recently, Hinton et al. [14] proposed the idea of Cap-sNet, which models the spatial relationships with capsule architecture. However, it seems that directly apply the orig-inal CapsNet to deep regression tracking may not work, which can be explained from three aspects. Firstly, the com-munication between two-level capsules is heavily relied on the pose matrices of two-level capsules. Speciﬁcally, the vote matrix of low-level capsules for the adjacently high-level capsules is computed by multiplying the pose matrix and transformation matrix. A large dimensional pose matrix will introduce much unnecessary noise. This is well veri-ﬁed by noisy capsules produced by CapsNet within the solid boxes of Figure 2, which will cause the weak discriminant 10948
Figure 2: Visual comparisons of PM with different size on the BlurCar1 and Girl2 sequences. The one marked by the solid box, no box, and dotted box indicates the PM with 32-D, 16-D, and 8-D w/ KDPMC strategy. Capsules of the
ConvCaps1 layer are displayed, the same below. to separate the target object from noisy background. Sec-ondly, the original CapsNet require a high computational demand even if it is carried out the digital image classiﬁ-cation task. Hence, CapsNet need to simplifying key al-gorithmic components to meet the high-speed demand of regression tracking. Thirdly, compared with static image classiﬁcation, tracking tasks need to consider the temporal relationships, challenging the original routing algorithm.
To fully take advantage of relationships learned by Cap-sNet and solve the above issues, we propose, a spatial-temporal relationships-aware capsule architecture for re-gression tracking, where three components are designed to implement CapsNet for effective exploring part-object rela-tionships. Speciﬁcally, we design a spatial capsules module (S-Caps), which takes the spatial part-object relationships into account. In such way, the relevant parts will be clus-tered together to form a complete object through the spa-tial domain. To capture temporal relationships across the frames, we design a temporal capsules module (T-Caps) to generate a set of temporal capsules and then pass these cap-sules through the STCaps Learning module, which allows the temporal capsules to condition to spatial capsules.
Besides, there should be strongly correlated types of cap-sules between the ﬁrst frame and the current frame. Specif-ically, the ﬁrst frame capsules are more reliable, which are derived from the only labeled sample (i.e., initial state of the object) during inference stage. Therefore, we design a prior-guided capsule routing algorithm (PGR), where the prior correlations computed from the ﬁrst frame, are used to estimate the capsule assignments for the next frame. In such a way, capsule assignments can be achieved to explore the relatively right part-object relationships.
Until now, the heavy computational burden inherited from CapsNet makes it difﬁcult to achieve the purpose of fast-tracking. We address this issue with a knowledge dis-tillation compression strategy to efﬁciently reduce the pa-rameters of those three modules. In detail, our compression strategy contains three steps: compressing each pose matrix (PM) to obtain a compact pose matrix (PM-short), align-ing PM-short to PM by an aligned pose matrix (AM), and merging the added AM into PM-short. Since there are few parameters to estimate, we can get a good estimation with a small amount samples, which also meet the demand of tracking task (i.e., only the initial state of the target is given).
As shown in the dotted boxes of Figure 2, the compressed capsules are distinctive enough to separate the object from the background. Besides, our capsule architecture has much fewer parameters and noisy assignments.
We make the following contributions in this work:
I, We incorporate a new property, i.e., spatial-temporal relationships, in regression tracking, which is implemented by CapsNet. To the best of our knowledge, this is the ﬁrst attempt to apply CapsNet for regression tracking.
II, We propose a S-Caps module for capturing spatial re-lationships, and a T-Caps module for encoding temporal re-lationships. These two modules are jointly clustering parts to form the target object within STCaps Learning.
III, We design a novel capsule routing algorithm, named prior-guided routing algorithm (PGR), which maintains capsule information from the ﬁrst frame to guide for cap-sules routing through subsequent frames.
IV, We propose a knowledge distillation pose matrix compression strategy (KDPMC) to adapt the proposed ar-chitecture to fast-tracking, aiming to select more tight and discriminative pose matrix representation.
V, We compare our approach with the state-of-the-art methods on seven datasets, which consistently show the su-periority of our algorithm.
The rest of the paper is organized as follows. We ﬁrst review the related works in Section 2. Then, we present the detailed conﬁguration of the proposed framework and pro-vide the optimization process in Section 3. After that, we provide some detailed analysis in Section 4. We further il-lustrate the implementation details and experimental results on popular tracking benchmarks in Section 5. Finally, con-clusions are drawn in Section 6. 2.
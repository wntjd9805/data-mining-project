Abstract
We show that the YOLOv4 object detection neural net-work based on the CSP approach, scales both up and down and is applicable to small and large networks while main-taining optimal speed and accuracy. We propose a network scaling approach that modiﬁes not only the depth, width, resolution, but also structure of the network. YOLOv4-large model achieves state-of-the-art results: 55.5% AP (73.4% AP50) for the MS COCO dataset at a speed of ∼16
FPS on Tesla V100, while with the test time augmenta-tion, YOLOv4-large achieves 56.0% AP (73.3 AP50). To the best of our knowledge, this is currently the highest ac-curacy on the COCO dataset among any published work.
The YOLOv4-tiny model achieves 22.0% AP (42.0% AP50) at a speed of ∼443 FPS on RTX 2080Ti, while by using Ten-sorRT, batch size = 4 and FP16-precision the YOLOv4-tiny achieves 1774 FPS. 1.

Introduction
The deep learning-based object detection technique has many applications in our daily life. For example, medi-cal image analysis, self-driving vehicles, business analytics, and face identiﬁcation all rely on object detection. The com-puting facilities required for the above applications maybe cloud computing facilities, general GPU, IoT clusters, or single embedded device. In order to design an effective ob-ject detector, model scaling technique is very important, be-cause it can make object detector achieve high accuracy and real-time inference on various types of devices.
The most common model scaling technique is to change the depth (number of layers in a neural network) and width (number of ﬁlters in a layer) of the backbone, and then train neural networks suitable for different devices. For exam-ple among the ResNet [11] series, ResNet-152 and ResNet-101 are often used in cloud server GPUs, ResNet-50 and
ResNet-34 are often used in personal computer GPUs, and
ResNet-18 and ResNet-10 can be used in low-end embed-Figure 1: Comparison of the proposed scaled-YOLOv4 and other state-of-the-art object detectors. The dashed line means only latency of model inference, while the solid line include model inference and post-processing. ded systems. In [2], Cai et al. try to develop techniques that can be applied to various device network architectures with only training once. They use techniques such as decou-pling training and search and knowledge distillation to de-couple and train several sub-nets, so that the entire network and sub-nets are capable of processing target tasks. Tan et al. [34] proposed using network architecture search (NAS) technique to perform compound scaling width, depth, and resolution on EfﬁcientNet-B0. They use this initial network to search for the best convolutional neural network (CNN) architecture for a given amount of computation and set it as EfﬁcientNet-B1, and then use linear scale-up technique to obtain EfﬁcientNet-B2 to EfﬁcientNet-B7. Radosavovic et al. [27] summarized and added constraints from the vast parameter search space AnyNet, and then designed RegNet to ﬁnd optimal depth, bottleneck ratio, and width increase rate of a CNN. In addition, there are NAS and model scaling methods speciﬁcally proposed for object detection [6, 35]. 13029
Through analysis of state-of-the-art object detectors [1, 3, 6, 26, 35, 40, 44], we found that CSPDarknet53, which is the backbone of YOLOv4 [1], matches almost all op-timal architecture features obtained by network architec-ture search technique [27]. Therefore, we developed model scaling technique based on YOLOv4 and proposed scaled-YOLOv4. The proposed scaled-YOLOv4 turned out with excellent performance, as illustrated in Figure 1. In the pro-posed scaled-YOLOv4, we discussed the upper and lower bounds of linear scaling up/down models, and respectively analyzed the issues that need to be paid attention to in model scaling for small models and large models. Thus, we are able to systematically develop YOLOv4-large and
YOLOv4-tiny models. Scaled-YOLOv4 can achieve the best trade-off between speed and accuracy, and is able to perform real-time object detection on 15 FPS, 30 FPS, and 60 FPS movies, as well as embedded systems.
We summarize the contributions of this paper : (1) de-sign a powerful model scaling method for small model, which can systematically balance the computation cost and memory bandwidth of a light CNN; (2) design a simple yet effective strategy for scaling a large object detector; (3) an-alyze the relations among all model scaling factors and then perform model scaling based on most advantageous group partitions; (4) experiments have conﬁrmed that the FPN structure is inherently a once-for-all structure; and (5) we make use of the above methods to develop YOLOv4-tiny and YOLOv4-large. 2.
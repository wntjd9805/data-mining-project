Abstract 1.

Introduction
We propose a method, named DualMesh-UDF, to extract a surface from unsigned distance functions (UDFs), en-coded by neural networks, or neural UDFs. Neural UDFs are becoming increasingly popular for surface represen-tation because of their versatility in presenting surfaces with arbitrary topologies, as opposed to the signed dis-tance function that is limited to representing a closed sur-face. However, the applications of neural UDFs are hin-dered by the notorious difficulty in extracting the target sur-faces they represent. Recent methods for surface extraction from a neural UDF suffer from significant geometric errors or topological artifacts due to two main difficulties: (1) A
UDF does not exhibit sign changes; and (2) A neural UDF typically has substantial approximation errors.
DualMesh-UDF addresses these two difficulties. Specif-ically, given a neural UDF encoding a target surface ¯S to be recovered, we first estimate the tangent planes of ¯S at a set of sample points close to ¯S. Next, we organize these sample points into local clusters, and for each local clus-ter, solve a linear least squares problem to determine a final surface point. These surface points are then connected to create the output mesh surface, which approximates the tar-get surface. The robust estimation of the tangent planes of the target surface and the subsequent minimization problem constitute our core strategy, which contributes to the favor-able performance of DualMesh-UDF over other competing methods. To efficiently implement this strategy, we employ an adaptive Octree. Within this framework, we estimate the location of a surface point in each of the octree cells iden-tified as containing part of the target surface. Extensive ex-periments show that our method outperforms existing meth-ods in terms of surface reconstruction quality while main-taining comparable computational efficiency.
*Equal contribution
†Corresponding author
Implicit surfaces are widely used for surface representa-tion in computer vision and computer graphics. An implicit surface is usually defined as a level set of a function, such as the zero-level set of a signed distance function (SDF). Ex-tracting a mesh representation of an implicit surface from its defining equation is therefore a critical task for surface visualization and processing. Recent advances in machine learning have given rise to a new kind of implicit surface, called a neural implicit surface. A neural implicit surface is a level-set of a function encoded by an MLP (multilayer perceptron) and has the advantage of compactness and in-herent smoothness thanks to its MLP representation. SDFs or occupancy fields are widely used in these implicit repre-sentations [17, 15, 16, 4, 18, 20, 6, 1, 8, 14, 19].
However, neural implicit surfaces based on the SDF or occupancy fields require inside/outside labeling and thus can only represent orientable and closed surfaces. Hence, as an extension, unsigned distance functions (UDFs) have been used to represent surfaces of arbitrary topologies, in-cluding open surfaces with boundaries or non-orientable surfaces (e.g. the M¨obius strip). Despite its versatility, applications of a UDF-based surface representation are severely hindered by the difficulty in extracting the target surface it represents, as shown in [5] and [7].
Problem formulation: Suppose that a surface ¯S, called the target surface, is defined as the zero-level set of its un-signed distance function (UDF) ¯F (p). Then suppose that this UDF ¯F (p) is approximated by a neural network with the resulting network-encoded UDF being referred to as the neural UDF, denoted by F (p). Given a neural UDF F (p), the surface extraction problem is to robustly extract a sur-face S from F (p) such that S well approximates the target surface ¯S.
Challenges: The difficulty in surface extraction from a neural UDF arises from two aspects: (1) A UDF does not have zero-crossings (or sign changes) across the surface it represents. As a result, traditional mesh extraction methods
that rely on zero-crossings (e.g. Marching Cubes [13, 11],
Dual Contouring [10], and their variants) are not applica-ble to UDFs. (2) The MLP representation of a neural UDF tends to have significant approximation errors around the target surface (see detailed error characteristics of neural
UDFs in Sec. 3). This makes it even more challenging to extract a high-quality approximation of the target surface.
Several methods, MeshUDF [7], CAP-UDF [21] and
Neural Dual Contouring (NDC) [3], have recently been pro-posed for extracting a mesh surface from a UDF. MeshUDF and CAP-UDF attempt to infer the gradients of a UDF on the grids and determine the sign changes of the estimated gradients, invoking the Marching Cubes method for mesh extraction. When applied to a neural UDF, the sign-change inference step of this method suffers from instability due to the non-negligible error introduced by the approximate
MLP representation near the surface where the gradients of the ideal UDF are undefined. As a result, the extracted meshes are less accurate and often have topological errors (e.g. holes). The NDC method proposes a data-driven Dual
Contouring approach to predict the position of mesh ver-tices and dual faces directly from the UDF data. When ap-plied to a neural UDF, this method often produces meshes with considerable artifacts such as holes, zig-zags, etc.
We develop a new strategy, consisting of novel sampling and efficient optimization techniques to address the difficul-ties in surface extraction from the neural UDF. Suppose the input is a neural UDF F (p) encoding the target surface ¯S to be recovered. Our strategy has two key steps: (1) comput-ing approximate tangent planes of the target surface; and (2) local minimization for generating final surface points.
In Step (1), we first generate sample points pi around, but not too close to, the target surface ¯S, because the UDF values and gradients at locations too close to ¯S are rela-tively unreliable. Thus, pi are called off-surface sample points. For each pi, we use the UDF value F (pi) and its gradient ∇F (pi) to project pi towards the target surface to obtain point qi = pi − F (pi)ni(pi) where n(pi) =
∇F (pi)/∥∇F (pi)∥ [5]. These points qi are called projec-tion points. Although the points qi are very close to the target surface ¯S, as we will show later, the noisy error in the neural UDF makes these points a poor approximation to the target surface.
To further improve surface accuracy, for each projection point qi we generate an estimated tangent plane Ti of ¯S such that Ti passes through qi and has the unit normal vec-tor ni. Note that the normal vector ni of Ti is set to be n(pi) rather than n(qi) since the former is a more reliable estimation. This is because the initial sample point pi is not too close to ¯S, so the gradient ∇F (pi) is less contaminated by the pronounced errors of the neural UDF close to ¯S.
In Step (2), the estimated tangent planes are organized into clusters, which may overlap. For each cluster of tan-To efficiently implement gent planes Ti, we solve a linear least squares problem to produce a final surface point si that minimizes the sum of its squared distances to the tangent planes Ti. This mini-mization step based on tangent planes not only provides an accurate surface point but also allows us to faithfully recon-struct the sharp edges of the target surface. Finally, all the surface points si from all the clusters are connected to form the output mesh surface to approximate the target surface ¯S. the above strategy, our
DualMesh-UDF method adopts an adaptive Octree struc-ture to partition the space containing the target surface to regular cells. We developed efficient procedures to deter-mine those cells that contain part of the target surface and perform the sampling and minimization procedures in each occupied cell. To connect the surface points to create the output mesh, we follow the Dual Contouring approach, con-necting surface points residing in adjacent grid cells to cre-ate polygons dual to octree edges.
Extensive experiments demonstrate that our DualMesh-UDF significantly outperforms existing methods in terms of surface reconstruction accuracy and sharp feature preserva-tion.
The main contribution of this work is a new algorithm to robustly and accurately extract a surface from a neu-ral UDF. To overcome the inevitable approximation errors near the target surface and cut locus, we obtain robust esti-mation of surface tangent planes by leveraging off-surface sample points, use least square minimization to better pre-dict the surface points, and achieve high-quality surface ex-traction results with sharp features better preserved com-pared to the state of the art. The code is available at https://github.com/cong-yi/DualMesh-UDF. 2.
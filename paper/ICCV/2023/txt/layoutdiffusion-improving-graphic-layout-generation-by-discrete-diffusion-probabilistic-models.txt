Abstract
Creating graphic layouts is a fundamental step in graphic designs. In this work, we present a novel generative model named LayoutDiffusion for automatic layout genera-tion. As layout is typically represented as a sequence of dis-crete tokens, LayoutDiffusion models layout generation as a discrete denoising diffusion process. It learns to reverse a mild forward process, in which layouts become increasingly chaotic with the growth of forward steps and layouts in the neighboring steps do not differ too much. Designing such a mild forward process is however very challenging as lay-out has both categorical attributes and ordinal attributes.
To tackle the challenge, we summarize three critical factors for achieving a mild forward process for the layout, i.e., le-gality, coordinate proximity and type disruption. Based on the factors, we propose a block-wise transition matrix cou-pled with a piece-wise linear noise schedule. Experiments on RICO and PubLayNet datasets show that LayoutDiffu-sion outperforms state-of-the-art approaches significantly. it enables two conditional layout generation
Moreover, tasks in a plug-and-play manner without re-training and achieves better performance than existing methods. Project page: https://layoutdiffusion.github.io. 1.

Introduction
Graphic layout, i.e., the sizes and positions of elements, is important to the interaction between the viewer and the information. Recently, layout generation attracts growing research interest. Leading approaches [11, 16, 17, 20] of-ten represent a layout as a sequence of elements and lever-age Transformer [40] to model element relationships. As the placement of one element could depends on any part of a layout, global context modeling plays a critical role in layout generation. However, there is no satisfactory solution to it. Some studies simply consider biased con-text [1, 11, 16, 17]. They generate layout sequences autore-gressively, where the generation order for elements is pre-*Work done during an internship at Microsoft Research Asia. (a) Mild forward corruption process (b) Absorbing [2] (c) Uniform [37] (d) The mapping between colors and element types used in Figs. 1a to 1c
Figure 1. Comparison of different forward corruption processes.
We sample the layouts at the timesteps 0, 1/6, 2/6, 3/6, 4/6, 5/6, and 1 of the total timestep. The blank page is used when the format of the layout sequence is destroyed. defined and the placement of one element only depends on a certain part of layout. A few other studies try to utilize global context by non-autoregressive generation [22]. Un-fortunately, they fail to improve the generation quality sig-nificantly since it is too challenging to generate a sequence in a single pass [7].
Meanwhile, the emerging diffusion probabilistic model (DDPM) [13, 38] achieves amazing performance on many generation tasks [12, 21, 33â€“36, 44]. It consists of multiple rounds, each of which gradually denoises the latent vari-ables towards the desired data distribution. This sort of pro-cess seems to be a promising solution to layout generation.
First, the layout generated in the last round could serve as the global context for the generation in the next round. Sec-ond, by multiple rounds of denoising, a layout could be re-fined iteratively, overcoming the challenge of single-pass generation from non-autoregressive models.
To this end, we propose LayoutDiffusion to improve graphic layout generation. As a layout is represented as a sequence of discrete tokens [11,16,20], we formulate layout generation as a discrete diffusion process. Roughly speak-ing, it samples a layout by reversing a forward process. The forward process corrupts the real data into a sequence of in-creasingly noisy latent variables by a fixed Markov Chain.
The reverse process starts from noise and denoises it step by step via learning the posterior distribution.
To ease the estimation of the posterior distribution, it is critical to design a mild forward corruption process [29], in which latent variables in neighboring steps do not differ too much and become increasingly chaotic with the growth of forward steps (see Fig. 1a). However, designing such a pro-cess for layout is non-trivial, due to the heterogeneous na-ture of the layout sequence, where the tokens representing element types are categorical while the tokens representing element coordinates are ordinal. Existing discrete forward processes hardly consider heterogeneous tokens. Directly applying them to layout data often leads to harsh corrup-tions, where a layout is changed dramatically at each step (see Figs. 1b and 1c). For example, the uniform process in Fig. 1c will transition an element type token to a coordi-nate token, drastically violating the layout semantics.
To realize a mild corruption process for layout, we make three important observations. (i) Legality. The transition between type tokens and coordinate tokens will lead to an il-legal layout sequence, resulting in an unpredictable change between forward steps. Hence, it is vital to impose legality (ii) Coordinate Proximity. during the corruption process.
Coordinate tokens are ordinal, and thus transitioning a co-ordinate token to its proximal tokens (e.g., from 0 to 1) will introduce a milder change to a layout compared with transi-tioning to distant ones (e.g., from 0 to 127). (iii) Type Dis-ruption. Unlike coordinate tokens, type tokens are categori-cal and do not have particular proximity. Simply transition-ing one type to another may cause abrupt semantic changes to a layout (e.g., from a button to a background image).
Motivated by the above observations, we propose a block-wise transition matrix coupled with a piece-wise lin-ear noise schedule in LayoutDiffusion. The transition ma-trix is designed as follows. First, to achieve legality, we only allow the internal transition between coordinate to-kens and that between type tokens. Second, regarding co-ordinate proximity, we leverage discretized Gaussian [2], where the transition between more proximal tokens takes a higher probability, for the transition between coordinate to-kens. Third, as for type disruption, we introduce absorbing state [2]. Each type token either stays the same or transi-tions to the absorbing state. To further alleviate type disrup-tion, we propose a piece-wise linear noise schedule to make the transition for element types only occur in the late stage of the forward process. With above techniques, LayoutDif-fusion achieves the mild forward process shown in Fig. 1a.
Our design also enables LayoutDiffusion to perform cer-tain conditional layout generation tasks in a plug-and-play manner without re-training, which has never been explored by previous work. Specifically, owning to the mild forward process achieved by LayoutDiffusion, its reverse process is to iteratively improve a layout, which naturally supports the task of layout refinement [32]. Besides, as the transition of element types only occurs in the late forward process, Lay-outDiffusion will determine the element types in a layout quickly in the reverse process. Thus, it can perform genera-tion conditioned on types by simply keeping the types fixed and running the reverse process.
In summary, this work makes four key contributions: 1. We formulate layout generation as a discrete diffusion process, which addresses biased context modeling by iterative refinement from a non-autoregressive model. 2. We design a new diffusion process based on the hetero-geneous nature of layout sequence (legality, coordinate proximity and type disruption). It not only better suits layout data but also showcases a promising way of ap-plying diffusion models to other heterogeneous data. 3. We enable certain conditional layout generation tasks in a plug-and-play manner without re-training. 4. We make extensive experiments and user studies. Lay-outDiffusion outperforms existing methods on all the tasks in terms of most evaluation metrics, even if it is not re-trained for conditional generation tasks. 2.
Abstract
Initialization 10th iteration
RANSAC-based algorithms are the standard techniques for robust estimation in computer vision. These algorithms are iterative and computationally expensive; they alter-nate between random sampling of data, computing hypothe-ses, and running inlier counting. Many authors tried dif-ferent approaches to improve efficiency. One of the ma-jor improvements is having a guided sampling, letting the
RANSAC cycle stop sooner. This paper presents a new adaptive sampling process for RANSAC. Previous methods either assume no prior information about the inlier/outlier classification of data points or use some previously com-In this paper, we derive puted scores in the sampling. a dynamic Bayesian network that updates individual data points’ inlier scores while iterating RANSAC. At each itera-tion, we apply weighted sampling using the updated scores.
Our method works with or without prior data point scor-In addition, we use the updated inlier/outlier scor-ings. ing for deriving a new stopping criterion for the RANSAC loop. We test our method in multiple real-world datasets for several applications and obtain state-of-the-art results.
Our method outperforms the baselines in accuracy while needing less computational time. The code is available at https://github.com/merlresearch/bansac. 100th iteration 1000th iteration
Figure 1. We run BANSAC in a homography estimation prob-lem. We took a pair from the HPatches dataset [2] and show the updated inlier probabilities of data points (feature matches with color code at the right) over iterations. In the first row, from left to right, we show the probabilities at the start and iteration 10.
The second row shows iterations 100 and 1000. For visualization purposes, we show only 250 randomly chosen matches. 1

Introduction
Outliers are one of the primary causes of poor perfor-mance in computer vision. Robust estimators are essential since imaging sensors suffer from several types of noise and distortions. Removing outliers is one of the initial and more relevant steps in many computer vision tasks, such as rel-ative pose estimation [12, 28, 32, 35, 39, 50], camera local-ization [10, 42, 43, 51], and mapping [22, 26, 29, 36, 44, 45].
The gold-standard robust estimator is RANSAC (RANdom
SAmple Consensus), introduced in [23]. RANSAC-based algorithms are iterative methods that, at each iteration: sam-ple minimal sets, estimate a model, and run inlier counting.
The output is the solution with the largest consensus.
The original RANSAC dates back to 1981. Over the years, many authors changed the original loop to allevi-ate some of its limitations. All these alternatives focus on improving the sampling process, getting a better hypoth-esis, improving the stopping criteria, or changing the in-lier counting. Most modifications add significant gains in computational efficiency. This paper focuses on improv-ing the sampling efficiency even further. The main question we want to tackle in this paper is: Will changing the scor-ing weights over iterations help in sampling and defining the stopping criteria? To answer this question, we propose
BANSAC, a new sampling strategy for the RANSAC loop.
Figure 1 illustrates our approach.
Previous methods such as [4, 11, 16, 37, 47, 48] focus on exploiting scoring priors or considering some geomet-ric relationships. However, the best-performing methods
keep these scores fixed while running RANSAC. We focus on updating the scores online and using them for sampling minimal data. By modeling the problem with probabilities, we propose a new sampling strategy that uses a dynamic
Bayesian network for updating the scores. These are the paper’s main contributions: – A novel adaptive sampling strategy that uses a dynamic
Bayesian network to update data points’ inlier scores.
Our method does not need any prior information about the quality of the data, although it can use it; – A new simple and intuitive stopping criterion using the updated scores; and – Several experiments with multiple datasets show that our approach outperforms the best baselines in accu-racy, being also more efficient.
We implemented BANSAC using C++, within the OpenCV
USAC framework [1]. 2
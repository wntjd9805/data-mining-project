Computing derivatives of rendered surfaces with respect to scene parameters is crucial in various fields, such as graphics, vision, and machine learning. While triangle meshes are commonly used to represent shapes, their derivatives are undefined at occlusions or topology changes. As a result, volumetric representations, particularly Neural Radiance Fields (NeRF), have gained popularity in computer vision applications. However, volume rendering is costly and unnecessary if surface representation is sufficient. This paper proposes a method to render both explicit (e.g., mesh) and implicit (e.g., isosurface) representations while generating accurate derivatives, including at occlusion boundaries. The method involves a non-differentiable rasterization step for sampling the surface and resolving occlusions, followed by a depth-aware, differentiable splatting operation to process the samples. The surface extraction and rasterization method can be any conventional technique like Marching Cubes. The resulting splats provide smooth derivatives at occlusion boundaries. We term this method rasterize-then-splat (RtS).Between the rasterization and splatting steps, the surface samples can be shaded using any differentiable function on a rasterized image buffer, employing deferred shading. NeRF network is an example of a differentiable shading function, where it predicts radiance based on position and viewing direction. Our method allows converting a pretrained NeRF into a surface light field, eliminating the need for raymarching. The surface is represented as an isosurface of the density field extracted from the pretrained NeRF, shaded using the NeRF color prediction branch, and jointly fine-tuned with the density field. This optimized surface and surface light field achieve rendering quality comparable to the original NeRF but at a significantly faster speed due to a single network evaluation per pixel.Furthermore, our method demonstrates high-quality derivatives for inverse rendering of meshes and parametric surfaces, with straightforward implementation. An implementation of RtS for mesh-based rendering is provided as part of TensorFlow Graphics.
Abstract
Synchronization refers to the problem of inferring the un-known values attached to vertices of a graph where edges are labelled with the ratio of the incident vertices, and labels belong to a group. This paper addresses the syn-chronization problem on multi-graphs, that are graphs with more than one edge connecting the same pair of nodes. The problem naturally arises when multiple measures are avail-able to model the relationship between two vertices. This happens when different sensors measure the same quantity, or when the original graph is partitioned into sub-graphs that are solved independently. In this case, the relationships among sub-graphs give rise to multi-edges and the prob-lem can be traced back to a multi-graph synchronization.
The baseline solution reduces multi-graphs to simple ones by averaging their multi-edges, however this approach falls short because: i) averaging is well defined only for some groups and ii) the resulting estimator is less precise and accurate, as we prove empirically. Specifically, we present
MULTISYNC, a synchronization algorithm for multi-graphs that is based on a principled constrained eigenvalue opti-mization. MULTISYNC is a general solution that can cope with any linear group and we show to be profitably usable both on synthetic and real problems. 1.

Introduction
Many tasks in Computer Vision can be formulated as the synchronization [50] of group-labelled graphs: given a network of nodes labelled with unknown elements of a group Σ, it is required to estimate them from a collection of noisy relative measurements expressed as ratios (or dif-ferences) attached to edges. A prominent example is when the nodes of the graph are sensors and the goal is to recover the unknown attitude and location of each sensor in a com-mon reference frame. In this case, labels are in the Special
Euclidean Group Σ = SE(3), and the pairwise measure-ments are relative orientations. Depending on the group, the synchronization formulation can be exploited to model other relevant problems in Computer Vision, such as struc-ture from motion, simultaneous localization and mapping
Figure 1: A multi-graph is a graph that admits multiple edges be-tween its nodes. Nodes correspond to unknown group elements xi ∈ SO(3) and edges correspond to known relative measures. A multi-edge with cardinality 3, resulting for instance from different estimates of relative transformations, is depicted in orange. (SLAM), multi-view matching and image mosaicking.
Traditionally, synchronization is defined on a simple graph, i.e., a graph where vertex pairs are connected by at most one edge.
In this work, instead, we deal with the case where multiple measurements are available for the same pair of nodes (multi-edge) and synchronization is per-formed on a multi-graph rather than on a simple graph (see
Fig. 1). This general multi-graph synchronization frame-work allows us to naturally account for multiple measure-ments between the same pair of nodes, which often hap-pens in many applications. In SLAM, for instance, multi-ple sensors (cameras, IMU, GPS, . . . ) can estimate the 6 d.o.f motion of a vehicle. Another scenario where multi-graphs naturally arise is in large-scale problems, where an original graph is partitioned into smaller sub-graphs that are solved independently to save computing time. In this con-text, the cut-edges connecting vertices from different sub-graphs give rise to multi-edges and yield a multi-graph syn-chronization problem, as will be clarified in Sec. 5. This partitioned approach not only reduces memory and process-ing time, but also enable multi-threading and parallelism.
In addition, it has relevant implications in terms of privacy since it allows for data to be segregated so that each pro-cessing node sees only a portion of the data (see, e.g., [25]).
The naive synchronization solution on multi-graphs –
henceforth named edge averaging – consists in reducing multi-edges to simple ones by averaging their measure-ments. This suffers from several shortcomings. First of all, averaging is well defined only for some groups: while it is possible to average rotations [32], there is not a princi-pled solution for homographies. Secondly, even when it is possible to average multi-edges, the resulting estimator has sub-optimal statistical properties. As an example, consider the problem of estimating a scale factor s that links two ma-trices with noisy entries: A = sB. The optimal estimate is the least squares solution s = tr(B⊤A)/ tr(B⊤B) which is different from, e.g., taking the average of the entry-wise division A./B. Our experiments confirm that this intuition holds also for synchronization.
Contributions. Our solution – named MULTISYNC– ap-proaches synchronization of group-labelled multi-graphs from a new perspective: rather than averaging measures in order to collapse a multi-edge to a simple one, it expands the multi-graph replicating nodes involved in multi-edges and enforces identity constraints between replicated nodes.
This leads to a constrained optimization problem for which we derive a general closed-form spectral solution, that can be applied to graphs labelled with any linear group. Our ex-periments, performed on both synthetic and real data sets, demonstrate that MULTISYNC outperforms edge averaging in terms of accuracy and precision. In the context of par-titioned problems, our solution strikes a good balance be-tween accuracy and complexity, as opposed to performing synchronization on the whole graph. To summarize, our contribution is three-fold: we present, for the first time, a formal definition of the synchronization of multi-graphs, which is a significant extension of the synchronization of simple graphs; we derive MULTISYNC, a practical algorithm for solv-ing a synchronization problem on a multi-graph, which is based on an expansion algorithm coupled with a con-strained spectral solution to deal with replicated nodes; we demonstrate how the multi-graph framework can be conveniently used to partition classical synchroniza-tion tasks, achieving a good trade-off between accu-racy and complexity.
Outline. The paper is organized as follows. Sec. 2 reviews previous works. Sec. 3 provides the theoretical footing and presents our solution. Sec. 4 reports synthetic experimental results and Sec. 5 describes a possible application of multi-graph synchronization: partitioned synchronization. Con-clusions are drawn in Sec. 6. 2.